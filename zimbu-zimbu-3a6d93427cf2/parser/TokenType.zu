#
# The Zimbu compiler written in Zimbu
#
# TokenType enum
#
# Copyright 2009 Bram Moolenaar  All Rights Reserved.
# Licensed under the Apache License, Version 2.0.  See the LICENSE file or
# obtain a copy at: http://www.apache.org/licenses/LICENSE-2.0
#

ENUM TokenType @public
  unknown
  eof         # end of input
  sep         # separator: at least a space or line break
  line_sep    # line separator: at least a line break
  comment     # comment without preceding white space or line break
  empty       # nothing

  nil
  this
  parent
  false
  true
  ok
  fail
  stringLiteral  # string literal
  stringExprStart  # string literal followed by \(expr)
  char        # 'c'
  any
  var

  use         # USE
  get         # GET
  threeDots   # ...

  id          # identifier or number, text is in "value"

  import
  as
  options

  alias
  type
  copy_start  # >>>
  copy_end    # <<<

  module
  class
  shared
  static
  interface
  piece
  enum
  bits
  func
  proc
  lambda

  extends
  augments
  grows
  implements
  include

  inf
  ninf
  nan

  return
  exit
  throw
  try
  catch
  finally
  defer

  # predefined methods
  new
  re
  ready

  c           # for "Class.C" and C()
  i           # for "Class.I"
  java        # for JAVA()
  js          # for JS()

  build_if
  build_elseif
  build_else
  generate_if
  generate_elseif
  generate_else
  generate_error

  if
  elseif
  else
  ifnil
  while
  break
  continue
  proceed
  switch
  case
  match
  default
  do
  until
  for
  in
  to
  upto
  step

  comma          # ,
  semicolon      # ;
  colon          # :
  question       # ?
  colonnil       # ?:
  dotnil         # ?.
  at             # @
  dot            # .
  p_open         # (
  p_close        # )
  c_open         # {
  c_close        # }
  sq_open        # [
  sq_o_open      # O[
  sq_close       # ]
  dollar         # $

  minus          # -
  minmin         # --
  plus           # +
  plusplus       # ++
  tilde          # ~
  star           # *
  slash          # /
  percent        # %
  concat         # _
  bit_or         # |
  bit_xor        # ^
  amp            # &
  rshift         # >>
  lshift         # <<

  assign         # =
  minassign      # -=
  plusassign     # +=
  multassign     # *=
  divassign      # /=
  percentassign  # %=
  tildeassign    # ~=
  andassign      # &=
  orassign       # |=
  xorassign      # ^=
  stringassign   # ..=
  lshiftassign   # <<=
  rshiftassign   # >>=

  equal          # ==
  equalIc        # ==?
  gives          # =>
  notequal       # !=
  notequalIc     # !=?
  reMatch        # =~
  reMatchIc      # =~?
  noReMatch      # !~
  noReMatchIc    # !~?
  and            # &&
  or             # ||
  not            # !
  gt             # >
  gte            # >=
  lt             # <
  lte            # <=

  is             # IS
  isnot          # ISNOT
  isa            # ISA
  isnota         # ISNOTA
}
