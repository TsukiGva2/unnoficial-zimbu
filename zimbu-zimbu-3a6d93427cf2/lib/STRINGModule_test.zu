#
# The Zimbu compiler written in Zimbu
#
# Tests for the builtin module STRING.
#
#*license
#* Copyright 2015 Bram Moolenaar  All Rights Reserved.
#*
#* Licensed under the Apache License, Version 2.0.  See the LICENSE file or
#* obtain a copy at: http://www.apache.org/licenses/LICENSE-2.0
#

FUNC test_containsString() status
  string svfb = "fúubär"
  TEST.true(svfb.contains("fúu"))
  TEST.true(svfb.contains("bär"))
  TEST.false(svfb.contains("foo"))

  RETURN OK
}

FUNC test_containsRegex() status
  string svfb = "fúubär"
  TEST.true(svfb.contains(RE("fú.")))
  TEST.true(svfb.contains(RE(".är")))
  TEST.false(svfb.contains(RE("foo")))

  RETURN OK
}

FUNC test_findRegex() status
  string svfb = "fúubär"
  TEST.equal(0, svfb.find(RE("fú.")))
  TEST.equal(3, svfb.find(RE(".är")))
  TEST.equal(-1, svfb.find(RE("foo")))

  RETURN OK
}

FUNC test_slice() status
  TEST.equal("45", "012345".slice(4))
  TEST.equal("5", "012345".slice(5))
  TEST.equal("", "012345".slice(6))
  TEST.equal("", "012345".slice(99))
  TEST.equal("012345", "012345".slice(0))
  TEST.equal("012345", "012345".slice(-1))
  TEST.equal("012345", "012345".slice(-22))

  string s
  TEST.equal(NIL, s.slice(2))

  RETURN OK
}

FUNC test_slice2() status
  TEST.equal("234", "012345".slice(2, 4))
  TEST.equal("5", "012345".slice(5, 10))
  TEST.equal("", "012345".slice(6, 10))
  TEST.equal("", "012345".slice(99, 95))
  TEST.equal("", "012345".slice(4, 3))
  TEST.equal("", "012345".slice(1, 0))
  TEST.equal("", "012345".slice(0, -1))

  TEST.equal("0123", "012345".slice(0, 3))
  TEST.equal("0123", "012345".slice(-1, 3))
  TEST.equal("0123", "012345".slice(-22, 3))

  string s
  TEST.equal(NIL, s.slice(2, 3))

  RETURN OK
}

FUNC test_sliceSize() status
  TEST.equal("this", "this and that".sliceSize(0, 4))
  TEST.equal("that", "this and that".sliceSize(9, 4))
  TEST.equal(" and ", "this and that".sliceSize(4, 5))

  TEST.equal("5", "012345".sliceSize(5, 5))
  TEST.equal("", "012345".sliceSize(6, 5))
  TEST.equal("01234", "012345".sliceSize(-1, 5))
  TEST.equal("01234", "012345".sliceSize(-2, 5))

  string s
  TEST.equal(NIL, s.sliceSize(-2, 5))

  RETURN OK
}

FUNC test_sliceWrapSize() status
  TEST.equal("this", "this and that".sliceWrapSize(0, 4))
  TEST.equal("that", "this and that".sliceWrapSize(-4, 4))
  TEST.equal(" and ", "this and that".sliceWrapSize(4, 5))

  TEST.equal("5", "012345".sliceWrapSize(5, 5))
  TEST.equal("", "012345".sliceWrapSize(6, 5))
  TEST.equal("5", "012345".sliceWrapSize(-1, 5))
  TEST.equal("45", "012345".sliceWrapSize(-2, 5))

  string s
  TEST.equal(NIL, s.sliceWrapSize(-2, 5))

  RETURN OK
}
