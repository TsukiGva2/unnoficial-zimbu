#
# The Zimbu compiler written in Zimbu
#
# ARG module loader
#
# Copyright 2009 Bram Moolenaar  All Rights Reserved.
# Licensed under the Apache License, Version 2.0.  See the LICENSE file or
# obtain a copy at: http://www.apache.org/licenses/LICENSE-2.0
#

IMPORT ../Builtin.zu
IMPORT ../Declaration.zu
IMPORT ../DeclStore.zu
IMPORT ../Generate.zu
IMPORT ../Output.zu
IMPORT ../Resolve.zu
IMPORT ../SContext.zu
IMPORT ../genC/WriteC.zu
IMPORT ../genJS/WriteJS.zu
IMPORT ../genJava/WriteJava.zu

MODULE ARGLoader @public @items=public
  Declaration moduleDecl

  # Prepare for using the builtin ARG module.
  FUNC prepare() Builtin
    # We need the pName below.
    DeclStore.wantPName("MARGModule", "VrawName")
    DeclStore.wantPName("MARGModule", "VexeName")
    DeclStore.wantPName("MARGModule", "VrawArgs")
    DeclStore.wantPName("MARGModule", "VnrawArgs")
    DeclStore.wantPName("MARGModule", "VcleanArgs")
    DeclStore.wantPName("MARGModule", "FinitExeName")
    DeclStore.wantPName("MARGModule", "Finit")

    Builtin b = NEW()
    b.moduleName = "ARGModule"
    b.fileName = "ARGModule.zu"
    b.setup = setup
    RETURN b
  }

  # Invoked when the ARG module is used, after it was processed first time.
  PROC setup(Builtin builtin, SContext ctx)
    IF moduleDecl == NIL
      # Add this module to the list of predefined symbols.
      moduleDecl = Builtin.addLibModule("ARG", builtin)

      # Write lines to main() later.
      WriteC.mainEarlyinitWriters.add(writeMainEarlyInitC)
      WriteC.mainInitWriters.add(writeMainInit)

      WriteJS.mainEarlyInitWriters.add(writeMainEarlyInitJS)
      WriteJS.mainInitWriters.add(writeMainInit)

      WriteJava.mainEarlyInitWriters.add(writeMainEarlyInitJava)
      WriteJava.mainInitWriters.add(writeMainInit)

      ctx.addUsedItem(Declaration.newList)

      # When ARG.exeName is used then initExeName() will be called from early
      # inits.
      DeclStore.getDecl("MARGModule", "VexeName").addDependsOn(
                               DeclStore.getDecl("MARGModule", "FinitExeName"))

      # When ARG.cleanArgs was used (e.g., through ARG.Size()) then it needs
      # to be initialized by calling ARG.init()
      DeclStore.getDecl("MARGModule", "VcleanArgs").addDependsOn(
                                      DeclStore.getDecl("MARGModule", "Finit"))
    }
  }

  # Initialize ARG values from the argument list for C.
  PROC writeMainEarlyInitC(WriteC gen, Output out)
    IF moduleDecl != NIL
      out.write("\n")
      IF !Generate.skipUnused()
                || gen.isDeclUsed(DeclStore.getDecl("MARGModule", "VrawName"))
        string rawName = DeclStore.getPName("MARGModule", "VrawName")
        out.write(" " .. rawName .. " = Zstr(argv[0]);\n")
      }

      writeInitExeName(gen, out)

      IF !Generate.skipUnused()
                || gen.isDeclUsed(DeclStore.getDecl("MARGModule", "VrawArgs"))
        string rawArgs = DeclStore.getPName("MARGModule", "VrawArgs")
        out.write(" " .. rawArgs .. ''" = ZnewList(&string__T, 0);"'')
        out.write(''"
 {
  int i;
  for (i = 1; i < argc; ++i) {
   ZLa("'' .. rawArgs .. ''", -1, (Tz)(void*)Zstr(argv[i]));
  }
 }
"'')
      }
    }
  }

  # Initialize ARG values from the argument list for JS.
  PROC writeMainEarlyInitJS(WriteJS gen, Output out)
    IF moduleDecl != NIL
      out.write("\n")
      IF !Generate.skipUnused()
                || gen.isDeclUsed(DeclStore.getDecl("MARGModule", "VrawName"))
        string rawName = DeclStore.getPName("MARGModule", "VrawName")
        out.write(" " .. rawName .. " = process.argv[1];\n")
      }

      writeInitExeName(gen, out)

      IF !Generate.skipUnused()
                || gen.isDeclUsed(DeclStore.getDecl("MARGModule", "VrawArgs"))
        string rawArgs = DeclStore.getPName("MARGModule", "VrawArgs")
        out.write(" " .. rawArgs .. ''" = {a: [], itemType: string__T};"'')
        out.write(''"
 {
  for (var i = 2; i < process.argv.length; ++i) {
   ZLa("'' .. rawArgs .. ''", -1, process.argv[i]);
  }
 }
"'')
      }
    }
  }

  # Initialize ARG values from the argument list for Java.
  PROC writeMainEarlyInitJava(WriteJava gen, Output out)
    IF moduleDecl != NIL
      out.write("\n")
      IF !Generate.skipUnused()
                || gen.isDeclUsed(DeclStore.getDecl("MARGModule", "VrawName"))
        string rawName = DeclStore.getPName("MARGModule", "VrawName")
        out.write(" " .. rawName .. " = \"todo\";\n")
      }

      writeInitExeName(gen, out)

      IF !Generate.skipUnused()
                || gen.isDeclUsed(DeclStore.getDecl("MARGModule", "VrawArgs"))
        string rawArgs = DeclStore.getPName("MARGModule", "VrawArgs")
        out.write(" " .. rawArgs .. ''" = new ZList<String>(string__T);"'')
        out.write(''"
 for (int i = 0; i < args.length; i++) {
  ZLa("'' .. rawArgs .. ''", -1, args[i]);
 }
"'')
      }
    }
  }

  PROC writeInitExeName(Resolve gen, Output out)
    IF !Generate.skipUnused()
              || gen.isDeclUsed(DeclStore.getDecl("MARGModule", "VexeName"))
      string initName = DeclStore.getPName("MARGModule", "FinitExeName")
      out.write(" " .. initName .. "();\n")
    }
  }

  # Call ARG.init().  Works the same way for C and JS.
  PROC writeMainInit(Resolve gen, Output out)
    IF !Generate.skipUnused()
                   || gen.isDeclUsed(DeclStore.getDecl("MARGModule", "Finit"))
      string argInit = DeclStore.getPName("MARGModule", "Finit")
      out.write(" " .. argInit .. "();\n")
    }
  }
}
