#
# The Zimbu compiler written in Zimbu
#
# builtin module TIME
#

#= Various time related stuff
#
#- Still very much under development.
#
#*license
#* Copyright 2010 Bram Moolenaar  All Rights Reserved.
#*
#* Licensed under the Apache License, Version 2.0.  See the LICENSE file or
#* obtain a copy at: http://www.apache.org/licenses/LICENSE-2.0
#
MODULE TIMEModule @items=public

  #= Returns the curent Coordinated Universal Time (UTC) since epoch in usec.
  FUNC current() int @public
    int usec
    GENERATE_IF Z.lang == "C"
>>> uses(sys_time)
    struct timeval tv;
    gettimeofday(&tv, NULL);
    %usec% = (Ti)tv.tv_sec * 1000000LL + (Ti)(Ti)tv.tv_usec;
<<<
    GENERATE_ELSE  # both JS and Java
>>> uses(javaDate)
    %usec% = new Date().getTime() * 1000;
<<<
    }
    RETURN usec
  }

  #= Broken-down values of a moment in time.
  #- Second resolution.
  #
  #- Example:
  #% IO.print(TIME.Values.NEW().ToString())
  #- Equivalent to:
  #% IO.print(TIME.Values.NEW(TIME.current()).ToString())
  CLASS Values @items=public
    int $usec     #= microseconds, 0 - 999'999
    int $sec      #= seconds, 0 - 59
    int $min      #= minutes, 0 - 59
    int $hour     #= hour, 0 - 23
    int $day      #= day of the month, 1 - 31
    int $month    #= month, 1 - 12
    int $year     #= year, negative for BC
    int $weekDay  #= day of the week, 1 (Sunday) - 7 (Saturday)
    int $yearDay  #= day of the year, 1 - 366
    Dst $dst      #= information about daylight saving time

    #= Create a new object using the current time and system time zone.
    NEW()
      NEW(current())
    }

    #= Create a new object. When |empty| is TRUE all fields are zero.
    #- When |empty| is FALSE does the same as NEW().
    NEW(bool empty)
      IF !empty
        NEW(current())
      }
    }

    #= Create a new object using the time |usec| and using the system time
    #= zone.
    NEW(int usec)
      GENERATE_IF Z.lang == "C"
>>> uses(time_h)
  time_t tt = %usec% / 1000000;
  struct tm tms;
  struct tm *tmsp;
#ifdef __MINGW32__
  tmsp = localtime(&tt);
  if (tmsp) tms = *tmsp;
#else
  localtime_r(&tt, &tms);
#endif
  %$sec% = tms.tm_sec;
  %$min% = tms.tm_min;
  %$hour% = tms.tm_hour;
  %$day% = tms.tm_mday;
  %$month% = tms.tm_mon + 1;
  %$year% = tms.tm_year + 1900;
  %$weekDay% = tms.tm_wday + 1;
  %$yearDay% = tms.tm_yday + 1;
  if (tms.tm_isdst > 0) %$dst% = %Dst.on%;
  else if (tms.tm_isdst == 0) %$dst% = %Dst.off%;
<<<
      GENERATE_ELSEIF Z.lang == "Java"
>>> uses(javaDate, javaCalendar)
  Calendar d = Calendar.getInstance();
  d.setTimeInMillis(%usec% / 1000L);
  %$sec% = d.get(Calendar.SECOND);
  %$min% = d.get(Calendar.MINUTE);
  %$hour% = d.get(Calendar.HOUR);
  %$day% = d.get(Calendar.DAY_OF_MONTH);
  %$month% = d.get(Calendar.MONTH);
  %$year% = d.get(Calendar.YEAR);
  %$weekDay% = d.get(Calendar.DAY_OF_WEEK);
  %$yearDay% = d.get(Calendar.DAY_OF_YEAR);
<<<
      GENERATE_ELSE
>>>
  var d = new Date(%usec% / 1000);
  %$sec% = d.getSeconds();
  %$min% = d.getMinutes();
  %$hour% = d.getHours();
  %$day% = d.getDate();
  %$month% = d.getMonth() + 1;
  %$year% = d.getFullYear();
  %$weekDay% = d.getDay() + 1;
  var yearStart = new Date(%$year%, 0, 0);
  %$yearDay% = Math.floor((d - yearStart) / (1000 * 60 * 60 * 24)) + 1;
<<<
      }
      $usec = usec % 1'000'000
    }

    #= Get the time stored in the object as micro seconds.
    #- Returns -1 if the member values are wrong.
    FUNC $getUsec() int
      int r
      GENERATE_IF Z.lang == "C"
>>> uses(time_h)
  struct tm tms;
  tms.tm_sec = %$sec%;
  tms.tm_min = %$min%;
  tms.tm_hour = %$hour%;
  tms.tm_mday = %$day%;
  tms.tm_mon = %$month% - 1;
  tms.tm_year = %$year% - 1900;
  if (%$dst% == %Dst.on%) tms.tm_isdst = 1;
  else if (%$dst% == %Dst.off%) tms.tm_isdst = 0;
  else tms.tm_isdst = -1;
  %r% = mktime(&tms) * 1000000LL + %$usec%;
<<<
      GENERATE_ELSE
>>>
  var d = new Date(%$year%, %$month% - 1, %$day%, %$hour%, %$min%, %$sec%, 0)
  %r% = d.getTime() * 1000 + %$usec%;
<<<
      }
      RETURN r
    }

    #= Return the time in international format: YYYY/MM/DD hh:mm:ss.
    FUNC $ToString() string
      IO.StringWriter w = NEW()
      w.write($year)
      w.write("/")
      w.write($month.ToString("02d"))
      w.write("/")
      w.write($day.ToString("02d"))
      w.write(" ")
      w.write($hour.ToString("02d"))
      w.write(":")
      w.write($min.ToString("02d"))
      w.write(":")
      w.write($sec.ToString("02d"))
      RETURN w.ToString()
    }

    #= Return the time in international format, but using dashes: YYYY-MM-DD
    #= hh:mm:ss.
    #- This can be used in a file name, where slashes are not allowed.
    FUNC $toStringDash() string
      IO.StringWriter w = NEW()
      w.write($year)
      w.write("-")
      w.write($month.ToString("02d"))
      w.write("-")
      w.write($day.ToString("02d"))
      w.write(" ")
      w.write($hour.ToString("02d"))
      w.write(":")
      w.write($min.ToString("02d"))
      w.write(":")
      w.write($sec.ToString("02d"))
      RETURN w.ToString()
    }

    #= Return the time in global English short format: Day, YYYY Mon DD
    #= hh:mm:ss.
    FUNC $toStringShort() string
      IO.StringWriter w = NEW()
      w.write(daysShort[$weekDay - 1])
      w.write(", ")
      w.write($year)
      w.write(" ")
      w.write(monthsShort[$month - 1])
      w.write(" ")
      w.write($day.ToString("02d"))
      w.write(" ")
      w.write($hour.ToString("02d"))
      w.write(":")
      w.write($min.ToString("02d"))
      w.write(":")
      w.write($sec.ToString("02d"))
      RETURN w.ToString()
    }

    #= Return the time in global English format: Weekday, YYYY Month DD
    #= hh:mm:ss.
    FUNC $toStringFull() string
      IO.StringWriter w = NEW()
      w.write(daysFull[$weekDay - 1])
      w.write(", ")
      w.write($year)
      w.write(" ")
      w.write(monthsFull[$month - 1])
      w.write(" ")
      w.write($day.ToString("02d"))
      w.write(" ")
      w.write($hour.ToString("02d"))
      w.write(":")
      w.write($min.ToString("02d"))
      w.write(":")
      w.write($sec.ToString("02d"))
      RETURN w.ToString()
    }

    SHARED
      #= Create a TIME.Values from a string like it is returned from
      #= $ToString() or $toStringDash().
      #- The string must contain "YYYY.MM.DD.hh.mm.ss", where each dot can be
      #- one or more of slash, dash, space or colon.  The seconds can be
      #- omitted, zero will be used then.
      #
      #- $weekDay, $yearDay and $dst will not be set.
      #
      #- If the format is wrong a E.BadValue exception is thrown.
      FUNC fromString(string t) Values
        list<string> parts = t.splitAnyOf("/-: ")
        IF parts.Size() < 5 || parts.Size() > 6
          THROW E.BadValue.NEW(
              "TIME.Values.fromString(): expected 5 or 6 parts, got "
              .. parts.Size())
        }
        Values r = NEW(TRUE)
        r.year = parts[0].toInt()
        r.month = parts[1].toInt()
        r.day = parts[2].toInt()
        r.hour = parts[3].toInt()
        r.min = parts[4].toInt()
        IF parts.Size() == 6
          r.sec = parts[5].toInt()
        }
        RETURN r
      }
    }
  }

  #= Information about daylight saving time.
  ENUM Dst
    unknown    #= No information available
    off        #= DST is off
    on         #= DST is effective
  }

  #= List to lookup the short English day of the week: "Sun", "Mon", etc.
  #- Sunday is used as the first day of the week, index zero.
  list<string> daysShort = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]

  #= List to lookup the English day of the week: "Sunday", "Monday", etc.
  #- Sunday is used as the first day of the week, index zero.
  list<string> daysFull = ["Sunday", "Monday", "Tuesday", "Wednesday",
                           "Thursday", "Friday", "Saturday"]

  #= List to lookup the short English month name: "Jan", "Feb", etc.
  #- January has index zero.
  list<string> monthsShort = ["Jan", "Feb", "Mar", "Apr", "May", "Jun",
                              "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]

  #= List to lookup the English month name: "January", "February", etc.
  #- January has index zero.
  list<string> monthsFull = ["January", "February", "March", "April", "May",
                             "June", "July", "August", "September", "October",
                             "November", "December"]

  #= Do nothing for |usec| microseconds.
  PROC sleep(int usec)
    # TODO: what about Javascript?
    GENERATE_IF Z.lang == "C"
    # Prefer using nanosleep(), some versions of usleep() can only sleep up to
    # one second. But MingW doesn't have nanosleep().
>>> uses(time_h, windows_h)
#ifdef __MINGW32__
    Sleep((int)((%usec% + 999) / 1000));
#else
    struct timespec tm;
    tm.tv_sec = %usec% / 1000000;
    tm.tv_nsec = (%usec% % 1000000) * 1000;
    nanosleep(&tm, NULL);
#endif
<<<
    }
  }

  #= Do nothing for |sec| seconds.
  PROC sleepSec(int sec)
    sleep(sec * 1'000'000)
  }

}
