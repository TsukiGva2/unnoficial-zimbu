#
# The Zimbu compiler written in Zimbu
#
# Tests for the builtin module ZUT.
#
#*license
#* Copyright 2015 Bram Moolenaar  All Rights Reserved.
#*
#* Licensed under the Apache License, Version 2.0.  See the LICENSE file or
#* obtain a copy at: http://www.apache.org/licenses/LICENSE-2.0
#

IMPORT.ZUT testdir/zutTest.zut

FUNC test_htmlEscape() status
  TEST.equal("", ZUT.htmlEscape(""))
  TEST.equal("&lt;div&gt;", ZUT.htmlEscape("<div>"))
  TEST.equal("&amp;lt;div&amp;gt;", ZUT.htmlEscape("&lt;div&gt;"))

  RETURN OK
}

FUNC test_zutHtml() status
  # Adding a string uses escaping.
  ZUT.Html html = NEW()
  html.add("<div>")
  TEST.equal("&lt;div&gt;", html.ToString())

  # Adding a ZUT.Html: no escaping
  html = NEW()
  ZUT.Html clean = ZUT.Html.fromSafeString("<div>")
  html.add(clean)
  TEST.equal("<div>", html.ToString())

  RETURN OK
}

FUNC test_zutUrl() status
  ZUT.Url url = NEW()
  TEST.equal("", url.ToString())
  url.add("")
  TEST.equal("", url.ToString())
  url.add("http://zimbu.org/path?q=yes#frag")
  TEST.equal("http://zimbu.org/path?q=yes#frag", url.ToString())

  # When at the start "javascript" is not allowed.
  url = NEW()
  string error
  TRY
    url.add("javascript:alert(666)")
  CATCH ZUT.E_BadValue e
    error = e.ToString()
  }
  TEST.contains("Cannot use javascript:", error,
                "didn't catch javascript: protocol")

  url = NEW()
  error = NIL
  TRY
    url.add("javaScript:alert(666)")
  CATCH ZUT.E_BadValue e
    error = e.ToString()
  }
  TEST.contains("Cannot use javascript:", error,
                "didn't catch javascript: protocol")

  # After the protocol "javascript" is allowed.
  url = NEW()
  url.add("http:")
  url.add("javascript:alert(666)")
  TEST.equal("http:javascript:alert%28666%29", url.ToString())

  # Parameters are escaped differently after ?q=
  url = NEW()
  url.add("http://domain/path?q=")
  url.add("this&that=bad")
  TEST.equal("http://domain/path?q=this%26that%3Dbad", url.ToString())

  # Parameters are not escaped differently after ?
  url = NEW()
  url.add("http://domain/path?")
  url.add("q=this&that=bad")
  TEST.equal("http://domain/path?q=this&that=bad", url.ToString())

  # Parameters are not escaped differently after literal &
  url = NEW()
  url.add("http://domain/path?q=")
  url.addUNESCAPED("this&")
  url.add("more&that=bad")
  TEST.equal("http://domain/path?q=this&more&that=bad", url.ToString())

  RETURN OK
}

FUNC test_tagNameEscaping() status
  TEST.equal("<div>text</div>", Testing.tagName("div").ToString())
  TEST.equal("<div>text</div>", Testing.tagName(" div").ToString())
  TEST.equal("<div>text</div>", Testing.tagName("div ").ToString())

  TEST.equal("<data-field>text</data-field>",
             Testing.tagName("data-field").ToString())
  TEST.equal("<d-vi_>text</d-vi_>", Testing.tagName("d-vi_").ToString())
  # Weird, but valid
  TEST.equal("<_>text</_>", Testing.tagName("_").ToString())

  FOR badName IN [
      # Names not allowed because escaping would not work properly
      "script", "style", "title",
      # Names with illegal characters.
      "  ", "a+b", "a&b", "a'b", "a<b", "a\"b",
      ]
    bool caught
    TRY
      Testing.tagName(badName)
    CATCH ZUT.E_BadValue e
      IF e.ToString().find("invalid character") > 0
          || e.ToString().find("cannot be used here") > 0
        caught = TRUE
      }
    }
    TEST.true(caught, "bad tag name '\(badName)'")
  }

  RETURN OK
}

FUNC test_classNameEscaping() status
  TEST.equal("<div class=\"one\">text</div>",
             Testing.className("one").ToString())
  TEST.equal("<div class=\"\">text</div>",
             Testing.className("").ToString())
  TEST.equal("<div class=\"a b\">text</div>",
             Testing.className("a b").ToString())
  TEST.equal("<div class=\"a&amp;b\">text</div>",
             Testing.className("a&b").ToString())
  TEST.equal("<div class=\"a&quot; b=c\">text</div>",
             Testing.className("a\" b=c").ToString())
  TEST.equal("<div class=\"&#10;&#9; \">text</div>",
             Testing.className("\n\t ").ToString())
  RETURN OK
}

FUNC test_classNameNoSpaceEscaping() status
  TEST.equal("<div class=one>text</div>",
             Testing.classNameNoSpace("one").ToString())
  TEST.equal("<div class=>text</div>",
             Testing.classNameNoSpace("").ToString())
  TEST.equal("<div class=a&amp;b>text</div>",
             Testing.classNameNoSpace("a&b").ToString())
  TEST.equal("<div class=a&#32;b>text</div>",
             Testing.classNameNoSpace("a b").ToString())
  TEST.equal("<div class=&#10;&#9;&#32;>text</div>",
             Testing.classNameNoSpace("\n\t ").ToString())
  RETURN OK
}

FUNC test_tagAndClassNameEscaping() status
  TEST.equal("<woof class=\"one\">text</woof>",
             Testing.tagAndClassName("woof", "one").ToString())
  RETURN OK
}

FUNC test_spaceAfterString() status
  TEST.equal("some } text", Testing.spaceAfterString().ToString())
  RETURN OK
}

FUNC test_lineBreakAfterString() status
  TEST.equal("some }\ntext", Testing.lineBreakAfterString().ToString())
  RETURN OK
}

# In HTML context / all types.
FUNC test_inElementEscaping() status
  # HTML / string
  TEST.equal("<div>a &lt;div&gt; &amp;<br>that</div>",
             Testing.inElementString("a <div> &\nthat").ToString())

  # HTML / Html
  ZUT.Html html = NEW().addUNESCAPED("a <div>\n&amp;")
  TEST.equal("<div>a <div>\n&amp;</div>",
             Testing.inElementHtml(html).ToString())

  # HTML / Url
  ZUT.Url url = NEW().addUNESCAPED("http://there.com/ni<ce&v=1")
  TEST.equal("<div>http://there.com/ni&lt;ce&amp;v=1</div>",
             Testing.inElementUrl(url).ToString())

  # HTML / Attributes: compile time error

  # HTML / Css: compile time error

  # HTML / Javascript: compile time error

  RETURN OK
}

# In HTML context / all types.
# This is the same as test_inElementEscaping(), except for Html.
FUNC test_inDataEscaping() status
  # HTML data / string
  TEST.equal("<title>a &lt;div&gt; &amp;\nthat</title>",
             Testing.inDataString("a <div> &\nthat").ToString())

  # HTML data / Html
  ZUT.Html html = NEW().addUNESCAPED("a <div>\n&amp;")
  TEST.equal("<title>a &lt;div&gt;\n&amp;</title>",
             Testing.inDataHtml(html).ToString())

  # HTML data / Url
  ZUT.Url url = NEW().addUNESCAPED("http://there.com/ni<ce&v=1")
  TEST.equal("<title>http://there.com/ni&lt;ce&amp;v=1</title>",
             Testing.inDataUrl(url).ToString())

  # HTML data / Attributes: compile time error

  # HTML data / Css: compile time error

  # HTML data / Javascript: compile time error

  RETURN OK
}

# In HTML + Javascript context / all types.
FUNC test_inHtmlJavascriptEscaping() status
  # HTML + Javascript / string
  TEST.equal("<script>var a = 1;\n</script>",
             Testing.inScriptString("var a = 1;\n").ToString())

  # HTML + Javascript / Html: compile time error

  # HTML + Javascript / Attributes: compile time error

  # HTML + Javascript / Url: compile time error

  # HTML + Javascript / Css: compile time error

  # HTML + Javascript / Javascript
  ZUT.Javascript js = NEW().addUNESCAPED("var a = '<script>';\n")
  TEST.equal("<script>var a = '<script>';\n</script>",
             Testing.inScriptJavascript(js).ToString())

  RETURN OK
}

FUNC test_preEscaping() status
  TEST.equal("<pre>some nasty&amp;dirty&lt;pre&gt; here</pre>",
             Testing.preString("nasty&dirty<pre>").ToString())

  ZUT.Html html = NEW().addUNESCAPED("a <div> &amp;")
  TEST.equal("<pre>some a &lt;div&gt; &amp; here</pre>",
             Testing.preHtml(html).ToString())
  RETURN OK
}

FUNC test_htmlAttributes() status
  # HTML attributes / string
  TEST.equal("<div na=sty di=\"rty\">text</div>",
             Testing.inAttributes("na=sty di=\"rty\"").ToString())
  TEST.equal("<div na=s&amp;ty> <di=\"rty\">text</div>",
             Testing.inAttributes("na=s&ty> <di=\"rty\"").ToString())

  # HTML attributes / Attributes
  ZUT.Attributes attr = NEW().addUNESCAPED("na=sty di=\"rty\"")
  TEST.equal("<div na=sty di=\"rty\">text</div>",
             Testing.inAttributesAttributes(attr).ToString())

  # HTML attributes / others: compile time error
  RETURN OK
}

FUNC test_htmlAttrValue() status
  # HTML attribute value / string
  TEST.equal("<div class=\"header\">text</div>",
             Testing.inAttrValue("header").ToString())
  TEST.equal("<div class=\"na=s&amp;ty> <di=&quot;rty&quot;\">text</div>",
             Testing.inAttrValue("na=s&ty> <di=\"rty\"").ToString())

  # HTML attribute value / Url
  ZUT.Url url = NEW().addUNESCAPED("http://zimbu.org/path?q=1&s=\"x\"#frag")
  TEST.equal("<div class=\"http://zimbu.org/path?q=1&amp;s=&quot;x&quot;#frag\">text</div>",
             Testing.inAttrValueUrl(url).ToString())

  # HTML attributes / others: compile time error
  RETURN OK
}

FUNC test_htmlUnquotedAttrValue() status
  # HTML attribute value / string
  TEST.equal("<div class=header>text</div>",
             Testing.inUnquotedAttrValue("header").ToString())
  TEST.equal("<div class=na&#61;s&amp;ty&gt;&#32;&lt;di&#61;&quot;rty&quot;>text</div>",
             Testing.inUnquotedAttrValue("na=s&ty> <di=\"rty\"").ToString())

  # HTML attribute value / Url
  ZUT.Url url = NEW().addUNESCAPED("http://zimbu.org/path?q=1&s=\"x\"#frag")
  TEST.equal("<div class=http:&#47;&#47;zimbu.org&#47;path?q&#61;1&amp;s&#61;&quot;x&quot;#frag>text</div>",
             Testing.inUnquotedAttrValueUrl(url).ToString())

  # HTML attributes / others: compile time error
  RETURN OK
}

FUNC test_htmlScriptAttrString() status
  TEST.equal("<div onclick=\"alert(&quot;help&quot;)\">foo</div>",
      Testing.inScriptAttrString("alert(\"help\")").ToString())

  ZUT.Javascript js = NEW().addUNESCAPED("var a = '<script>';\n")
  TEST.equal("<div onclick=\"var a = &#39;<script>&#39;;&#10;\">foo</div>",
      Testing.inScriptAttrJavascript(js).ToString())

  TEST.equal("<div onclick=alert(&quot;he&#32;lp&quot;)>foo</div>",
      Testing.inScriptUnquotedAttrString("alert(\"he lp\")").ToString())

  TEST.equal("<div onclick=var&#32;a&#32;&#61;&#32;&#39;&lt;script&gt;&#39;;&#10;>foo</div>",
      Testing.inScriptUnquotedAttrJavascript(js).ToString())

  RETURN OK
}

FUNC test_htmlStyleAttrString() status
  TEST.equal("<div style=\"color: url(&quot;there.img&quot;);\">foo</div>",
      Testing.inStyleAttrString("color: url(\"there.img\");").ToString())

  ZUT.Css css = NEW().addUNESCAPED("color: url(\"there.img\");")
  TEST.equal("<div style=\"color: url(&quot;there.img&quot;);\">foo</div>",
      Testing.inStyleAttrCss(css).ToString())

  TEST.equal("<div style=color:&#32;url(&quot;there.img&quot;);>foo</div>",
      Testing.inStyleUnquotedAttrString("color: url(\"there.img\");").ToString())

  TEST.equal("<div style=color:&#32;url(&quot;there.img&quot;);>foo</div>",
      Testing.inStyleUnquotedAttrCss(css).ToString())

  RETURN OK
}

FUNC test_urlAttribute() status
  TEST.equal("<a href=\"http://zimbu.org/path?q=1&s#frag\">there</a>",
             Testing.htmlUrlPlain().ToString())
  TEST.equal("http://zimbu.org/path?q=1&s#frag",
             Testing.urlPlain().ToString())

  TEST.equal("<a href=\"http://zimbu.org/path?q=1&s#frag\">there</a>",
             Testing.htmlUrlWithText("http://zimbu.org/path?q=1&s#frag").ToString())
  TEST.equal("http://zimbu.org/path?q=1&s#frag",
             Testing.urlWithText("http://zimbu.org/path?q=1&s#frag").ToString())

  ZUT.Url url = NEW().addUNESCAPED("http://zimbu.org/path?q=1&s#frag")
  TEST.equal("<a href=\"http://zimbu.org/path?q=1&s#frag\">there</a>",
             Testing.htmlUrlWithUrl(url).ToString())
  TEST.equal("http://zimbu.org/path?q=1&s#frag",
             Testing.urlWithUrl(url).ToString())

  # protocol: URL-escape
  TEST.equal("<a href=\"http://zimbu.org/path?q=1&s#frag\">there</a>",
             Testing.htmlUrlWithProto("http:").ToString())
  TEST.equal("<a href=\"z&m%7Bu.%60rg://zimbu.org/path?q=1&s#frag\">there</a>",
             Testing.htmlUrlWithProto("z&m{u.`rg:").ToString())
  TEST.equal("http://zimbu.org/path?q=1&s#frag",
             Testing.urlWithProto("http:").ToString())
  TEST.equal("z&m%7Bu.%60rg://zimbu.org/path?q=1&s#frag",
             Testing.urlWithProto("z&m{u.`rg:").ToString())

  # protocol: reject "javascript:"
  string error
  TRY
    Testing.htmlUrlWithProto("jaVaScRipt:alert(666)")
  CATCH ZUT.E_BadValue e
    error = e.ToString()
  }
  TEST.contains("Cannot use javascript:", error,
                "didn't catch javascript: protocol")
  error = NIL
  TRY
    Testing.urlWithProto("jaVaScRipt:alert(666)")
  CATCH ZUT.E_BadValue e
    error = e.ToString()
  }
  TEST.contains("Cannot use javascript:", error,
                "didn't catch javascript: protocol")

  # URL-escape domain
  TEST.equal("<a href=\"http://zimbu.org/path?q=1&s#frag\">there</a>",
             Testing.htmlUrlWithDomain("zimbu.org").ToString())
  TEST.equal("<a href=\"http://z&m%7Bu.%60rg/path?q=1&s#frag\">there</a>",
             Testing.htmlUrlWithDomain("z&m{u.`rg").ToString())
  TEST.equal("http://zimbu.org/path?q=1&s#frag",
             Testing.urlWithDomain("zimbu.org").ToString())
  TEST.equal("http://z&m%7Bu.%60rg/path?q=1&s#frag",
             Testing.urlWithDomain("z&m{u.`rg").ToString())

  # URL-escape path
  TEST.equal("<a href=\"http://zimbu.org/path?q=1&s#frag\">there</a>",
             Testing.htmlUrlWithPath("path").ToString())
  TEST.equal("<a href=\"http://zimbu.org/z&m%7Bu.%60rg?q=1&s#frag\">there</a>",
             Testing.htmlUrlWithPath("z&m{u.`rg").ToString())
  TEST.equal("http://zimbu.org/path?q=1&s#frag",
             Testing.urlWithPath("path").ToString())
  TEST.equal("http://zimbu.org/z&m%7Bu.%60rg?q=1&s#frag",
             Testing.urlWithPath("z&m{u.`rg").ToString())

  # URL-escape parameter
  TEST.equal("<a href=\"http://zimbu.org/path?q=1&s#frag\">there</a>",
             Testing.htmlUrlWithParams("q=1&s").ToString())
  TEST.equal("<a href=\"http://zimbu.org/path?javascript:alert%28666%29#frag\">there</a>",
             Testing.htmlUrlWithParams("javascript:alert(666)").ToString())
  TEST.equal("<a href=\"http://zimbu.org/path?z&m%7Bu.%60rg#frag\">there</a>",
             Testing.htmlUrlWithParams("z&m{u.`rg").ToString())
  TEST.equal("http://zimbu.org/path?q=1&s#frag",
             Testing.urlWithParams("q=1&s").ToString())
  TEST.equal("http://zimbu.org/path?javascript:alert%28666%29#frag",
             Testing.urlWithParams("javascript:alert(666)").ToString())
  TEST.equal("http://zimbu.org/path?z&m%7Bu.%60rg#frag",
             Testing.urlWithParams("z&m{u.`rg").ToString())

  # URL-param-escape parameter value
  TEST.equal("<a href=\"http://zimbu.org/path?q=value#frag\">there</a>",
             Testing.htmlUrlWithParamValue("value").ToString())
  TEST.equal("<a href=\"http://zimbu.org/path?q=z%26m%7Bu.%60rg#frag\">there</a>",
             Testing.htmlUrlWithParamValue("z&m{u.`rg").ToString())
  TEST.equal("<a href=\"localhost/path?q=it%20is%20true\">here</a>",
             Testing.htmlUrlWithParamLink("q=", "it is true").ToString())
  TEST.equal("http://zimbu.org/path?q=value#frag",
             Testing.urlWithParamValue("value").ToString())
  TEST.equal("http://zimbu.org/path?q=z%26m%7Bu.%60rg#frag",
             Testing.urlWithParamValue("z&m{u.`rg").ToString())
  TEST.equal("localhost/path?q=it%20is%20true",
             Testing.urlWithParamLink("q=", "it is true").ToString())

  # Using ZUT.Url for parameter value
  url = NEW().addUNESCAPED("http://zimbu.org/path?q=va%26ue#frag")
  TEST.equal("<a href=\"http://zimbu.org/path?q=http%3A%2F%2Fzimbu.org%2Fpath%3Fq%3Dva%26ue%23frag#frag\">there</a>",
             Testing.htmlUrlWithUrlParamValue(url).ToString())
  TEST.equal("http://zimbu.org/path?q=http%3A%2F%2Fzimbu.org%2Fpath%3Fq%3Dva%26ue%23frag#frag",
             Testing.urlWithUrlParamValue(url).ToString())

  # URL-escape fragment
  TEST.equal("<a href=\"http://zimbu.org/path?q=1&s#frag\">there</a>",
             Testing.htmlUrlWithFragment("frag").ToString())
  TEST.equal("<a href=\"http://zimbu.org/path?q=1&s#z&m%7Bu.%60rg\">there</a>",
             Testing.htmlUrlWithFragment("z&m{u.`rg").ToString())
  TEST.equal("http://zimbu.org/path?q=1&s#frag",
             Testing.urlWithFragment("frag").ToString())
  TEST.equal("http://zimbu.org/path?q=1&s#z&m%7Bu.%60rg",
             Testing.urlWithFragment("z&m{u.`rg").ToString())

  RETURN OK
}

# In CSS context / all types.
FUNC test_inCSSEscaping() status
  # CSS / string
  TEST.equal("p {\ncolor: 123; /* com'ment */\ncolor: 1.235e+26; /*cm\"t*/\ncolor: 'abc'; }",
             Testing.cssWithQuotedString(123, 1.235e26, "abc").ToString())
  TEST.equal("p {\ncolor: 123; /* com'ment */\ncolor: 1.235e+26; /*cm\"t*/\ncolor: 'a\\ab\\'c'; }",
             Testing.cssWithQuotedString(123, 1.235e26, "a\nb'c").ToString())

  TEST.equal("p { color: 123; }",
             Testing.cssWithString("123").ToString())

  string error = NIL
  TRY
    Testing.cssWithString("1'3")
  CATCH ZUT.E_BadValue e
    error = e.ToString()
  }
  TEST.contains("unterminated single quoted string in '1'3'", error,
                "didn't catch missing quote")

  error = NIL
  TRY
    Testing.cssWithString("1\"3")
  CATCH ZUT.E_BadValue e
    error = e.ToString()
  }
  TEST.contains("unterminated double quoted string in '1\"3'", error,
                "didn't catch missing quote")

  error = NIL
  TRY
    Testing.cssWithString("1'\n'3")
  CATCH ZUT.E_BadValue e
    error = e.ToString()
  }
  TEST.contains("unterminated single quoted string in '1'\n'3'", error,
                "didn't catch line break in string")

  TEST.equal("p { color: 1//3; }",
             Testing.cssWithString("1//3").ToString())

  error = NIL
  TRY
    Testing.cssWithString("1/*3")
  CATCH ZUT.E_BadValue e
    error = e.ToString()
  }
  TEST.contains("unterminated comment in '1/*3'", error,
                "didn't catch unterminated comment")

  error = NIL
  TRY
    Testing.cssWithString("1\x003")
  CATCH ZUT.E_BadValue e
    error = e.ToString()
  }
  TEST.contains("NUL character in '1\x003'", error,
                "didn't catch NUL")

  error = NIL
  TRY
    Testing.cssWithString("1\\\x003")
  CATCH ZUT.E_BadValue e
    error = e.ToString()
  }
  TEST.contains("NUL character in '1\\\x003'", error,
                "didn't catch NUL after backslash")

  error = NIL
  TRY
    Testing.cssWithString("12\\")
  CATCH ZUT.E_BadValue e
    error = e.ToString()
  }
  TEST.contains("trailing backslash in '12\\'", error,
                "didn't catch trailing backslash")

  error = NIL
  TRY
    Testing.cssWithString("12\\\nx")
  CATCH ZUT.E_BadValue e
    error = e.ToString()
  }
  TEST.contains("trailing backslash in '12\\\nx'", error,
                "didn't catch backslash before line break")

  # CSS / Html: compile time error

  # CSS / Url: compile time error

  # CSS / Attributes: compile time error

  # CSS / Css
  ZUT.Css css = NEW().addUNESCAPED("color: url('there.img');")
  TEST.equal("p { color: url('there.img'); }",
             Testing.cssWithCss(css).ToString())

  # CSS / Javascript: compile time error

  RETURN OK
}

# In CSS url context / all types.
FUNC test_inCSSUrlEscaping() status
  # CSS url / string
  TEST.equal("p { background: url(http://here/there?q=%22yes%22&%2531); }",
             Testing.cssWithUrlString("http://here/there?q=\"yes\"&%31").ToString())
 
  # CSS url / Url
  ZUT.Url url = NEW().addUNESCAPED("http://zimbu.org/path?q=va%26ue#frag")
  TEST.equal("p { background: url(http://zimbu.org/path?q=va%26ue#frag); }",
             Testing.cssWithUrl(url).ToString())

  # CSS single quoted url / string
  TEST.equal("p { background: url('http://here/there?q=%22yes%22&%2531'); }",
             Testing.cssWithUrlSQString("http://here/there?q=\"yes\"&%31").ToString())
  # CSS single quoted url / Url
  TEST.equal("p { background: url('http://zimbu.org/path?q=va%26ue#frag'); }",
             Testing.cssWithSQUrl(url).ToString())

  # CSS double quoted url / string
  TEST.equal("p { background: url(\"http://here/there?q=%22yes%22&%2531\"); }",
             Testing.cssWithUrlDQString("http://here/there?q=\"yes\"&%31").ToString())
  # CSS double quoted url / Url
  TEST.equal("p { background: url(\"http://zimbu.org/path?q=va%26ue#frag\"); }",
             Testing.cssWithDQUrl(url).ToString())

  RETURN OK
}

# In Javascript context / all types.
FUNC test_inJavascriptEscaping() status
  # Javascript / string
  TEST.equal("var a = 123; // com'ment\nvar b = 1.235e+26; /*cm\"t*/\nvar c = 'abc'; ",
             Testing.jsWithQuotedString(123, 1.235e26, "abc").ToString())
  TEST.equal("var a = 123; // com'ment\nvar b = 1.235e+26; /*cm\"t*/\nvar c = 'a\\nb\\'c'; ",
             Testing.jsWithQuotedString(123, 1.235e26, "a\nb'c").ToString())

  TEST.equal("if (a == 123)",
             Testing.jsWithString("123").ToString())

  string error = NIL
  TRY
    Testing.jsWithString("1'3")
  CATCH ZUT.E_BadValue e
    error = e.ToString()
  }
  TEST.contains("unterminated single quoted string in '1'3'", error,
                "didn't catch missing quote")

  error = NIL
  TRY
    Testing.jsWithString("1\"3")
  CATCH ZUT.E_BadValue e
    error = e.ToString()
  }
  TEST.contains("unterminated double quoted string in '1\"3'", error,
                "didn't catch missing quote")

  error = NIL
  TRY
    Testing.jsWithString("1'\n'3")
  CATCH ZUT.E_BadValue e
    error = e.ToString()
  }
  TEST.contains("unterminated single quoted string in '1'\n'3'", error,
                "didn't catch line break in string")

  TRY
    Testing.jsWithString("1//3")
  CATCH ZUT.E_BadValue e
    error = e.ToString()
  }
  TEST.contains("unterminated // comment in '1//3'", error,
                "didn't catch unterminated comment")

  error = NIL
  TRY
    Testing.jsWithString("1/*3")
  CATCH ZUT.E_BadValue e
    error = e.ToString()
  }
  TEST.contains("unterminated /* comment in '1/*3'", error,
                "didn't catch unterminated comment")

  error = NIL
  TRY
    Testing.jsWithString("1\x003")
  CATCH ZUT.E_BadValue e
    error = e.ToString()
  }
  TEST.contains("NUL character in '1\x003'", error,
                "didn't catch NUL")

  error = NIL
  TRY
    Testing.jsWithString("1\\\x003")
  CATCH ZUT.E_BadValue e
    error = e.ToString()
  }
  TEST.contains("NUL character in '1\\\x003'", error,
                "didn't catch NUL after backslash")

  error = NIL
  TRY
    Testing.jsWithString("12\\")
  CATCH ZUT.E_BadValue e
    error = e.ToString()
  }
  TEST.contains("trailing backslash in '12\\'", error,
                "didn't catch trailing backslash")

  error = NIL
  TRY
    Testing.jsWithString("12\\\nx")
  CATCH ZUT.E_BadValue e
    error = e.ToString()
  }
  TEST.contains("trailing backslash in '12\\\nx'", error,
                "didn't catch backslash before line break")

  # Javascript / Html: compile time error

  # Javascript / Attributes: compile time error

  # Javascript / Url: compile time error

  # Javascript / Css: compile time error

  # Javascript / Javascript
  ZUT.Javascript js = NEW().addUNESCAPED("'/*\"';\nalert('boo')")
  TEST.equal("var a = '/*\"';\nalert('boo');",
             Testing.jsWithJavascript(js).ToString())

  RETURN OK
}

# In Javascript string context / all types.
FUNC test_inJavascriptStringEscaping() status
  # Javascript string / string
  TEST.equal("var a = 'a\\'b\"c/d\\nx';\nvar b = \"a'b\\\"c/d\\nx\";\nvar c = /a'b\"c\\/d\\nx/;",
             Testing.jsStringWithString("a'b\"c/d\nx").ToString())

  # Javascript string / Url
  ZUT.Url url = NEW().addUNESCAPED("h://dom/pa?q=%24")
  TEST.equal("var a = 'h://dom/pa?q=%24';\nvar b = \"h://dom/pa?q=%24\";\nvar c = /h:\\/\\/dom\\/pa?q=%24/;",
             Testing.jsStringWithUrl(url).ToString())

  RETURN OK
}

# In Css comment context / all types.
FUNC test_inCssCommentEscaping() status
  # Css comment / string
  TEST.equal("/* a\nb* /c */",
             Testing.cssCommentWithString("a\nb*/c").ToString())

  # Css comment / Html
  ZUT.Html html = NEW().addUNESCAPED("h://dom/pa?q=%24")
  TEST.equal("/* h://dom/pa?q=%24 */",
             Testing.cssCommentWithHtml(html).ToString())

  # Css comment / Url
  ZUT.Url url = NEW().addUNESCAPED("h://dom/pa?q=%24")
  TEST.equal("/* h://dom/pa?q=%24 */",
             Testing.cssCommentWithUrl(url).ToString())

  # Css comment / Attributes
  ZUT.Attributes attr = NEW().addUNESCAPED("h=\"y*/es\"")
  TEST.equal("/* h=\"y* /es\" */",
             Testing.cssCommentWithAttributes(attr).ToString())

  # Css comment / Css
  ZUT.Css css = NEW().addUNESCAPED("col\ngrn/*cmt*/")
  TEST.equal("/* col\ngrn/*cmt* / */",
             Testing.cssCommentWithCss(css).ToString())

  # Css comment / Javascript
  ZUT.Javascript js = NEW().addUNESCAPED("a //cmt\nand/*m*/")
  TEST.equal("/* a //cmt\nand/*m* / */",
             Testing.cssCommentWithJavascript(js).ToString())

  RETURN OK
}

# In Javascript comment context / all types.
FUNC test_inJavascriptCommentEscaping() status
  # Javascript comment / string
  TEST.equal("// a\n//b*/c\n/* a\nb* /c */",
             Testing.jsCommentWithString("a\nb*/c").ToString())

  # Javascript comment / Html
  ZUT.Html html = NEW().addUNESCAPED("h://dom/pa?q=%24")
  TEST.equal("// h://dom/pa?q=%24\n/* h://dom/pa?q=%24 */",
             Testing.jsCommentWithHtml(html).ToString())

  # Javascript comment / Url
  ZUT.Url url = NEW().addUNESCAPED("h://dom/pa?q=%24")
  TEST.equal("// h://dom/pa?q=%24\n/* h://dom/pa?q=%24 */",
             Testing.jsCommentWithUrl(url).ToString())

  # Javascript comment / Attributes
  ZUT.Attributes attr = NEW().addUNESCAPED("h=\"y*/es\"")
  TEST.equal("// h=\"y*/es\"\n/* h=\"y* /es\" */",
             Testing.jsCommentWithAttributes(attr).ToString())

  # Javascript comment / Css
  ZUT.Css css = NEW().addUNESCAPED("col\ngrn/*cmt*/")
  TEST.equal("// col\n//grn/*cmt*/\n/* col\ngrn/*cmt* / */",
             Testing.jsCommentWithCss(css).ToString())

  # Javascript comment / Javascript
  ZUT.Javascript js = NEW().addUNESCAPED("a //cmt\nand/*m*/")
  TEST.equal("// a //cmt\n//and/*m*/\n/* a //cmt\nand/*m* / */",
             Testing.jsCommentWithJavascript(js).ToString())

  RETURN OK
}

FUNC test_HtmlUnescape() status
  TEST.equal("\x00", ZUT.htmlUnescape("&#0;"))
  TEST.equal("\"", ZUT.htmlUnescape("&quot;"))
  TEST.equal("'", ZUT.htmlUnescape("&#39;"))
  TEST.equal("&", ZUT.htmlUnescape("&amp;"))
  TEST.equal("<", ZUT.htmlUnescape("&lt;"))
  TEST.equal(">", ZUT.htmlUnescape("&gt;"))

  TEST.equal("->-<-", ZUT.htmlUnescape("-&gt;-&lt;-"))
  RETURN OK
}

FUNC getAnyHtml() ZUT.Html
  RETURN NEW().addUNESCAPED("a <div>\n&amp;")
}

FUNC getAnyAttributes() ZUT.Attributes
  RETURN NEW().addUNESCAPED("class=\"green\"")
}

FUNC getAnyUrl() ZUT.Url
  RETURN NEW().addUNESCAPED("http://the.org/path?q=1#yes")
}

FUNC getAnyCss() ZUT.Css
  RETURN NEW().addUNESCAPED(".class { color: green; }")
}

FUNC getAnyJavascript() ZUT.Javascript
  RETURN NEW().addUNESCAPED("var i = 11;")
}
