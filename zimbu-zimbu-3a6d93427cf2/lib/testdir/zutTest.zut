# ZUT templates used for testing the ZUT library.
#
# Copyright 2009 Bram Moolenaar  All Rights Reserved.
# Licensed under the Apache License, Version 2.0.  See the LICENSE file or
# obtain a copy at: http://www.apache.org/licenses/LICENSE-2.0
#

MODULE Testing

  TEMPLATE tagName(string name) ZUT.Html
    <[=name]>text</[=name]>
  }

  TEMPLATE className(string name) ZUT.Html
    <div class="[=name]">text</div>
  }

  TEMPLATE classNameNoSpace(string name) ZUT.Html
    <div class=[=name]>text</div>
  }

  TEMPLATE tagAndClassName(string tagname, string classname) ZUT.Html
    <[=tagname] class="[=classname]">text</[=tagname]>
  }

  TEMPLATE spaceAfterString() ZUT.Html
    some ["}"] text
  }

  TEMPLATE lineBreakAfterString() ZUT.Html
    some ["}"]
    text
  }

  # HTML / string
  TEMPLATE inElementString(string text) ZUT.Html
    <div>[=text]</div>
  }

  # HTML / Html
  TEMPLATE inElementHtml(ZUT.Html text) ZUT.Html
    <div>[=text]</div>
  }

  # HTML / Url
  TEMPLATE inElementUrl(ZUT.Url text) ZUT.Html
    <div>[=text]</div>
  }

  # HTML data / string
  TEMPLATE inDataString(string text) ZUT.Html
    <title>[=text]</title>
  }

  # HTML data / Html
  TEMPLATE inDataHtml(ZUT.Html text) ZUT.Html
    <title>[=text]</title>
  }

  # HTML data / Url
  TEMPLATE inDataUrl(ZUT.Url text) ZUT.Html
    <title>[=text]</title>
  }

  TEMPLATE preString(string text) ZUT.Html
    <pre>some [=text] here</pre>
  }

  TEMPLATE preHtml(ZUT.Html html) ZUT.Html
    <pre>some [=html] here</pre>
  }

  # HTML + Javascript / string
  TEMPLATE inScriptString(string text) ZUT.Html
    <script>[=text]</script>
  }

  # HTML + Javascript / Javascript
  TEMPLATE inScriptJavascript(ZUT.Javascript text) ZUT.Html
    <script>[=text]</script>
  }

  # HTML attributes / string
  TEMPLATE inAttributes(string attr) ZUT.Html
    <div [=attr]>text</div>
  }

  # HTML attributes / Attributes
  TEMPLATE inAttributesAttributes(ZUT.Attributes attr) ZUT.Html
    <div [=attr]>text</div>
  }

  # HTML attribute value / string
  TEMPLATE inAttrValue(string attr) ZUT.Html
    <div class="[=attr]">text</div>
  }

  # HTML attribute value / Url
  TEMPLATE inAttrValueUrl(ZUT.Url attr) ZUT.Html
    <div class="[=attr]">text</div>
  }

  # HTML unquoted attribute value / string
  TEMPLATE inUnquotedAttrValue(string attr) ZUT.Html
    <div class=[=attr]>text</div>
  }

  # HTML unquoted attribute value / Url
  TEMPLATE inUnquotedAttrValueUrl(ZUT.Url attr) ZUT.Html
    <div class=[=attr]>text</div>
  }

  # HTML Javascript attribute / string
  TEMPLATE inScriptAttrString(string text) ZUT.Html
    <div onclick="[=text]">foo</div>
  }

  # HTML Javascript attribute / Javascript
  TEMPLATE inScriptAttrJavascript(ZUT.Javascript text) ZUT.Html
    <div onclick="[=text]">foo</div>
  }

  # HTML Javascript unquoted attribute / string
  TEMPLATE inScriptUnquotedAttrString(string text) ZUT.Html
    <div onclick=[=text]>foo</div>
  }

  # HTML Javascript unquoted attribute / Javascript
  TEMPLATE inScriptUnquotedAttrJavascript(ZUT.Javascript text) ZUT.Html
    <div onclick=[=text]>foo</div>
  }

  # HTML style attribute / string
  TEMPLATE inStyleAttrString(string text) ZUT.Html
    <div style="[=text]">foo</div>
  }

  # HTML style attribute / Css
  TEMPLATE inStyleAttrCss(ZUT.Css text) ZUT.Html
    <div style="[=text]">foo</div>
  }

  # HTML style unquoted attribute / string
  TEMPLATE inStyleUnquotedAttrString(string text) ZUT.Html
    <div style=[=text]>foo</div>
  }

  # HTML style unquoted attribute / Css
  TEMPLATE inStyleUnquotedAttrCss(ZUT.Css text) ZUT.Html
    <div style=[=text]>foo</div>
  }

  # HTML + Url / =
  TEMPLATE htmlUrlPlain() ZUT.Html
    <a href="http://zimbu.org/path?q=1&s#frag">there</a>
  }

  # URL / =
  TEMPLATE urlPlain() ZUT.Url
    http://zimbu.org/path?q=1&s#frag
  }

  # HTML + Url / string
  TEMPLATE htmlUrlWithText(string url) ZUT.Html
    <a href="[=url]">there</a>
  }

  # URL / string
  TEMPLATE urlWithText(string url) ZUT.Url
    [=url]
  }

  # HTML + Url / Url
  TEMPLATE htmlUrlWithUrl(ZUT.Url url) ZUT.Html
    <a href="[=url]">there</a>
  }

  # URL / Url
  TEMPLATE urlWithUrl(ZUT.Url url) ZUT.Url
    [=url]
  }

  # HTML + Url / string pieces
  # URL / string pieces
  TEMPLATE htmlUrlWithProto(string proto) ZUT.Html
    <a href="[=proto]//zimbu.org/path?q=1&s#frag">there</a>
  }
  TEMPLATE urlWithProto(string proto) ZUT.Url
    [=proto]//zimbu.org/path?q=1&s#frag
  }

  TEMPLATE htmlUrlWithDomain(string domain) ZUT.Html
    <a href="http://[=domain]/path?q=1&s#frag">there</a>
  }
  TEMPLATE urlWithDomain(string domain) ZUT.Url
    http://[=domain]/path?q=1&s#frag
  }

  TEMPLATE htmlUrlWithPath(string path) ZUT.Html
    <a href="http://zimbu.org/[=path]?q=1&s#frag">there</a>
  }
  TEMPLATE urlWithPath(string path) ZUT.Url
    http://zimbu.org/[=path]?q=1&s#frag
  }

  TEMPLATE htmlUrlWithParams(string params) ZUT.Html
    <a href="http://zimbu.org/path?[=params]#frag">there</a>
  }
  TEMPLATE urlWithParams(string params) ZUT.Url
    http://zimbu.org/path?[=params]#frag
  }

  TEMPLATE htmlUrlWithParamValue(string value) ZUT.Html
    <a href="http://zimbu.org/path?q=[=value]#frag">there</a>
  }
  TEMPLATE urlWithParamValue(string value) ZUT.Url
    http://zimbu.org/path?q=[=value]#frag
  }

  TEMPLATE htmlUrlWithUrlParamValue(ZUT.Url value) ZUT.Html
    <a href="http://zimbu.org/path?q=[=value]#frag">there</a>
  }
  TEMPLATE urlWithUrlParamValue(ZUT.Url value) ZUT.Url
    http://zimbu.org/path?q=[=value]#frag
  }

  TEMPLATE htmlUrlWithParamLink(string paramName, string paramValue) ZUT.Html @public
    <a href="localhost/path?[=paramName][=paramValue]">here</a>
  }
  TEMPLATE urlWithParamLink(string paramName, string paramValue) ZUT.Url @public
    localhost/path?[=paramName][=paramValue]
  }

  TEMPLATE htmlUrlWithFragment(string fragment) ZUT.Html
    <a href="http://zimbu.org/path?q=1&s#[=fragment]">there</a>
  }
  TEMPLATE urlWithFragment(string fragment) ZUT.Url
    http://zimbu.org/path?q=1&s#[=fragment]
  }

  # CSS / string
  TEMPLATE cssWithQuotedString(int nr, float f, string text) ZUT.Css
    p {
      color: [=nr]; /* com'ment */
      color: [=f]; /*cm"t*/
      color: '[=text]';  # comment
    }
  }

  TEMPLATE cssWithString(string text) ZUT.Css
    p { color: [=text]; }
  }

  TEMPLATE cssWithCss(ZUT.Css text) ZUT.Css
    p { [=text] }
  }

  TEMPLATE cssCommentWithString(string text) ZUT.Css
    /* [=text] */
  }

  TEMPLATE cssCommentWithHtml(ZUT.Html text) ZUT.Css
    /* [=text] */
  }

  TEMPLATE cssCommentWithUrl(ZUT.Url text) ZUT.Css
    /* [=text] */
  }

  TEMPLATE cssCommentWithAttributes(ZUT.Attributes text) ZUT.Css
    /* [=text] */
  }

  TEMPLATE cssCommentWithCss(ZUT.Css text) ZUT.Css
    /* [=text] */
  }

  TEMPLATE cssCommentWithJavascript(ZUT.Javascript text) ZUT.Css
    /* [=text] */
  }

  TEMPLATE cssWithUrlString(string url) ZUT.Css
    p { background: url([=url]); }
  }

  TEMPLATE cssWithUrl(ZUT.Url url) ZUT.Css
    p { background: url([=url]); }
  }

  TEMPLATE cssWithUrlSQString(string url) ZUT.Css
    p { background: url('[=url]'); }
  }

  TEMPLATE cssWithSQUrl(ZUT.Url url) ZUT.Css
    p { background: url('[=url]'); }
  }

  TEMPLATE cssWithUrlDQString(string url) ZUT.Css
    p { background: url("[=url]"); }
  }

  TEMPLATE cssWithDQUrl(ZUT.Url url) ZUT.Css
    p { background: url("[=url]"); }
  }


  # Javascript / string
  TEMPLATE jsWithQuotedString(int nr, float f, string text) ZUT.Javascript
    var a = [=nr]; // com'ment
    var b = [=f]; /*cm"t*/
    var c = '[=text]';  # comment
  }

  TEMPLATE jsWithString(string text) ZUT.Javascript
    if (a == [=text])
  }

  TEMPLATE jsWithJavascript(ZUT.Javascript text) ZUT.Javascript
    var a = [=text];
  }

  # Javascript string / string
  TEMPLATE jsStringWithString(string text) ZUT.Javascript
    var a = '[=text]';
    var b = "[=text]";
    var c = /[=text]/;
  }

  TEMPLATE jsStringWithUrl(ZUT.Url url) ZUT.Javascript
    var a = '[=url]';
    var b = "[=url]";
    var c = /[=url]/;
  }

  TEMPLATE jsCommentWithString(string text) ZUT.Javascript
    // [=text]
    /* [=text] */
  }

  TEMPLATE jsCommentWithHtml(ZUT.Html text) ZUT.Javascript
    // [=text]
    /* [=text] */
  }

  TEMPLATE jsCommentWithUrl(ZUT.Url text) ZUT.Javascript
    // [=text]
    /* [=text] */
  }

  TEMPLATE jsCommentWithAttributes(ZUT.Attributes text) ZUT.Javascript
    // [=text]
    /* [=text] */
  }

  TEMPLATE jsCommentWithCss(ZUT.Css text) ZUT.Javascript
    // [=text]
    /* [=text] */
  }

  TEMPLATE jsCommentWithJavascript(ZUT.Javascript text) ZUT.Javascript
    // [=text]
    /* [=text] */
  }

}
