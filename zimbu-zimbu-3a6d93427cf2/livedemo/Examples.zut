#
# Zimbu live demo page
#
# Copyright 2015 Bram Moolenaar  All Rights Reserved.
# Licensed under the Apache License, Version 2.0.  See the LICENSE file or
# obtain a copy at: http://www.apache.org/licenses/LICENSE-2.0
#

MODULE Examples @public

  CSS
    .header {
      font-weight: bold;
      margin-bottom: 10px;
    }
  }

  TEMPLATE program1() string @public
FUNC Main() int
["  "]IO.print("Hello World")
["  "]RETURN 0
["}"]
  }

  TEMPLATE help1() ZUT.Html @public
    <div class="header">1. Hello world</div>
    <div>
      The entrance point to a Zimbu program is the Main function.<br>
      The Main function always returns an int, which is the exit code<br>
      of the program. A non-zero value means the program failed.<br>
      <br>
      IO.print() is the print() method of the IO module.<br>
      It writes the string argument to stdout with a line break.<br>
      <br>
      The IO module contains I/O functionality.  You do not need to<br>
      import it, the compiler knows where it is.<br>
      <br>
      The Main function ends with a ["}"].  In other languages END<br>
      is used, but that makes the code more difficult to read.<br>
      The unbalanced ["}"] is a trade mark of Zimbu.<br>
    </div>
  }

  TEMPLATE program2() string @public
FUNC Main() int
["  "]FOR word IN ["["]"nice", "big", "old"]
["    "]IO.print("Hello \(word) World!")
["  }"]
["  "]RETURN 0
["}"]
  }

  TEMPLATE help2() ZUT.Html @public
    <div class="header">2. FOR loop with list&lt;string&gt;</div>
    <div>
      A FOR loop iterates over a list of strings.  The "word" variable<br>
      gets set to each of the string values in the list.<br>
      <br>
      The IO.print() argument has the "word" variable inside \( and ).  This<br>
      is a simple way to evaluate an expression and insert the result inside<br>
      a string.<br>
      <br>
      An alternative would be to use string concatenation:<br>
      <code>IO.print("Hello " .. word .. " World!")</code><br>
      <br>
      The FOR loop ends at the ["}"].<br>
    </div>
  }

  TEMPLATE program3() string @public
FUNC Main() int
["  "]list<dyn> items = ["["]"nice", 1234, OK, 9.99, ["["]1, 2, 3]]
["  "]FOR item IN items
["    "]IO.print("Hello \(item) World!")
["  }"]
["  "]RETURN 0
["}"]
  }

  TEMPLATE help3() ZUT.Html @public
    <div class="header">3. FOR loop with list&lt;dyn&gt;</div>
    <div>
      Instead of a list of strings, here a list of mixed types is used.<br>
      The "dyn" type is dynamic, it can be set to any type at runtime.<br>
      <br>
      Here the \(item) gets the dyn variable and invokes ToString() on it.<br>
      This will use the right ToString() method for the actual type of the<br>
      variable.<br>
      <br>
      Using specific types allow for the compiler to report mistakes.<br>
      Mistakes with the dyn type are reported at runtime, thus you need<br>
      to run the program or write a test to verify that it works.<br>
    </div>
  }

}
