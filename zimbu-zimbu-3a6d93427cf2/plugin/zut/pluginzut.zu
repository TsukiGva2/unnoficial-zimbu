#
# Main file of the Zimbu Templates plugin
#
# Usage:
#      pluginzut infile.zut outfile.zu
#
# Copyright 2014 Bram Moolenaar  All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# The License can be found it in the LICENSE file, or you may obtain a copy of
# the License at http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
# License for the specific language governing permissions and limitations
# under the License.
#

IMPORT ../../parser/Input.zu
IMPORT ZutParser.zu
IMPORT ZutTokenizer.zu

FUNC Main() int
  # TODO: -I {path} and --import_path {path} options.
  IF ARG.Size() != 2
    IO.print("Usage: " .. ARG.rawName .. " infile.zut outfile.zu")
    EXIT 1
  }

  # Catch common mistakes in arguments.
  string inFileName = ARG.get(0)
  IF !inFileName.endsWith(".zut")
    IO.print("ERROR: Input name must end in '.zut': " .. inFileName)
    EXIT 1
  }
  string outFileName = ARG.get(1)
  IF !outFileName.endsWith(".zu")
    IO.print("ERROR: output name must end in '.zu': " .. outFileName)
    EXIT 1
  }

  # Parse the input file, write a Zimbu module to the output file.
  #
  # This reads and parses one file.  The resulting zimbu file may import other
  # files, they get processed when compiling that zimbu file.
  #
  # Each section results in a string that's written to the output file.
  IO.File inFile = IO.fileReader(inFileName)
  IF inFile == NIL
    IO.print("ERROR: Cannot open input file: " .. inFileName)
    EXIT 1
  }

  Input input = NEW(inFile, inFileName, "", record = TRUE)
  ZutTokenizer tokenizer = ZutTokenizer.NEW()
  ZutParser parser = ZutParser.NEW(tokenizer)

  IO.File outFile = IO.fileWriter(outFileName)
  parser.setOutFile(outFile)
  outFile.print("# GENERATED FILE - DO NOT EDIT")
  outFile.print("# generated from")
  outFile.print("#@ \(inFileName)")
  outFile.print()

  # Parse the file.  The extension points in ZutParser will handle the
  # Zut-specific parts.
  parser.parseInput(input, :import)

  # Write the collected statements.
  parser.writeImports()
  parser.writeBody()

  IF LOG.errorCount > 0
    # Write an error to the file, returning a non-zero exit value is not
    # always recognized.
    outFile.print("failed to process \(inFileName)")
    RETURN 1
  }

  RETURN 0
}
