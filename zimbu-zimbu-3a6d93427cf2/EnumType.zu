#
# The Zimbu compiler written in Zimbu
#
# EnumType class.
#
# The Type used to specify an ENUM.
# A value of an ENUM is EnumValueType.
#
# Copyright 2011 Bram Moolenaar  All Rights Reserved.
# Licensed under the Apache License, Version 2.0.  See the LICENSE file or
# obtain a copy at: http://www.apache.org/licenses/LICENSE-2.0
#

IMPORT Declaration.zu
IMPORT EnumValueType.zu
IMPORT SContext.zu
IMPORT SymUse.zu
IMPORT Type.zu
IMPORT ValueType.zu

CLASS EnumType EXTENDS ValueType @items=public
  list<Declaration.C>  $members

  # The parent ENUM for EXTENDS and the children.
  EnumType             $parent
  list<EnumType>       $children

  # The number of members, including all children.
  int                  $totalMemberCount

  # Declaration marked as used when one of the enum member names is used.
  Declaration.C        $usedValueName

  # Declaration marked as used when name of the enum is used.
  Declaration.C        $usedEnumName

  # Cached ValueType.
  EnumValueType      $valueType

  # Make a copy of this Type.  Every subclass must redefine it.
  FUNC $copyType() Type @replace @default
    EnumType ret = NEW($ttype, $name)
    $copyEnumValues(ret)
    RETURN ret
  }

  # Copy the values of this object into |ret|.
  PROC $copyEnumValues(EnumType ret) @default
    $copyValueValues(ret)
    ret.members = $members
    ret.parent = $parent
    ret.children = $children
  }

  PROC $addChild(Declaration child)
    IF $children == NIL
      $children = NEW()
    }
    $children.add(child)
  }

  # Get the root ENUM of this one, follwing EXTENDS upwards.
  FUNC $getRoot() EnumType
    IF $parent == NIL
      RETURN THIS
    }
    RETURN $parent.getRoot()
  }

  # Get an item by value.
  FUNC $getMember(int idx) Declaration.C
    IF $members != NIL
      # The members are numbered sequentially, no need to check each one.
      int firstMember = $members[0].type.<EnumValueType>.value
      IF idx >= firstMember && idx < firstMember + $members.Size()
        RETURN $members[idx - firstMember]
      }
    }
    FOR child IN $children
      Declaration.C decl = child.getMember(idx)
      IF decl != NIL
        RETURN decl
      }
    }
    RETURN NIL
  }

  # Return TRUE if one of the value names is used, in this ENUM or its
  # children.
  FUNC $isValueNameUsed(SContext ctx) bool
    IF ctx.gen.isDeclUsed(Type.aDyn)
      RETURN TRUE
    }
    IF $usedValueName != NIL && ctx.gen.isDeclUsed($usedValueName)
      RETURN TRUE
    }
    FOR child IN $children
      IF child.isValueNameUsed(ctx)
        RETURN TRUE
      }
    }
    RETURN FALSE
  }

  FUNC $toString(string indent, bool recurse) string @replace
    string ret = PARENT.toString(indent, recurse)
    RETURN ret .. " " .. $name
  }

  # Return TRUE for types that can have an instance: Class, Enum, Bits.
  FUNC $needCopyValue() bool @replace
    RETURN TRUE
  }

  # If this type is a Class, Enum, Bits or Method, return a reference to it.
  # Otherwise return THIS.
  FUNC $getValueType(SContext ctx) Type @replace
    RETURN $getEnumValue()
  }

  # Return an enumValue for this enum.
  FUNC $getEnumValue() EnumValueType
    IF $valueType == NIL
      $valueType = NEW(Type.Enum.enumValue, "instance of " .. $name)
      $valueType.enumType = THIS
      $valueType.addDependsOn(THIS)
    }
    RETURN $valueType
  }

  # Find member |name| and return its declaration.
  # Returns NIL when not found.
  # TODO: use |symUse|
  FUNC $findMember(string name, SymUse symUse) Declaration @replace
    IF $members != NIL
      FOR decl IN $members
        IF decl.name == name
          RETURN decl
        }
      }
    }
    IF $parent != NIL
      RETURN $parent.findMember(name, symUse)
    }
    RETURN NIL
  }

  # Add an enum member.  Caller must check for duplicates.
  PROC $addMember(string name, int value)
    Declaration.C decl = NEW(name)
    EnumValueType vt = NEW(Type.Enum.enumValue, "member of " .. $name)
    decl.type = vt
    vt.enumType = THIS
    vt.value = value
#    vt.decl = decl
    IF $members == NIL
      $members = NEW()
    }
    $members.add(decl)
  }

  # Return TRUE if this type is a parent of |other|.
  FUNC $isParentOf(Type other) bool @replace
    IF other ISA EnumType
      EnumType et = other
      WHILE et != NIL
        IF et IS THIS
          RETURN TRUE
        }
        et = et.parent
      }
    }
    RETURN FALSE
  }

}
