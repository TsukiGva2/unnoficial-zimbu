#
# The Zimbu compiler written in Zimbu
#
# Tests for ISA
#
#*license
#* Copyright 2015 Bram Moolenaar  All Rights Reserved.
#*
#* Licensed under the Apache License, Version 2.0.  See the LICENSE file or
#* obtain a copy at: http://www.apache.org/licenses/LICENSE-2.0
#

CLASS JustAClass
  int $some
  FUNC $getSome() int
    RETURN $some
  }
}

FUNC test_object() status
  JustAClass jac = NEW()
  jac.some = 8
  TEST.equal(8, jac.getSome())
  TEST.true(jac ISA JustAClass)
  jac = NIL
  TEST.false(jac ISA JustAClass)

  RETURN OK
}

INTERFACE I_Face
  FUNC $getIt() int
  }
}

CLASS Implementer IMPLEMENTS I_Face
  int $number
  FUNC $getIt() int
    RETURN $number
  }
}

FUNC test_iobject() status
  I_Face if = Implementer.NEW()
  TEST.true(if ISA Implementer)
  if = NIL
  TEST.false(if ISA Implementer)

  RETURN OK
}

CLASS OneClass
  FUNC $getOne() int
    RETURN 1
  }
}

CLASS AlsoOneClass IMPLEMENTS OneClass.I
  FUNC $getOne() int
    RETURN 2
  }
}

FUNC test_iobjectDotI() status
  OneClass.I oc = AlsoOneClass.NEW()
  TEST.true(oc ISA AlsoOneClass)
  TEST.true(oc.Type() == AlsoOneClass.Type())
  TEST.false(oc ISA OneClass)
  TEST.false(oc.Type() == OneClass.Type())
  oc = NIL
  TEST.false(oc ISA AlsoOneClass)
  TEST.false(oc ISA OneClass)

  oc = OneClass.NEW()
  TEST.false(oc ISA AlsoOneClass)
  TEST.false(oc.Type() == AlsoOneClass.Type())
  TEST.true(oc ISA OneClass)
  TEST.true(oc.Type() == OneClass.Type())

  RETURN OK
}

CLASS TopClass
  int  $number
}

CLASS ChildClass EXTENDS TopClass
  int  $child
}

FUNC test_xobject() status
  TopClass tc = ChildClass.NEW()
  TEST.true(tc ISA TopClass)
  TEST.false(tc.Type() == TopClass.Type())
  TEST.true(tc ISA ChildClass)
  TEST.true(tc.Type() == ChildClass.Type())
  tc = NIL
  TEST.false(tc ISA TopClass)
  TEST.false(tc ISA ChildClass)

  RETURN OK
}

CLASS Parent
  int $nr
  FUNC $getName() string @default
    RETURN "Parent"
  }
}

INTERFACE I_One
  FUNC $getSome() string
  }
}

CLASS ChildOne EXTENDS Parent IMPLEMENTS I_One
  FUNC $getName() string @replace
    RETURN "ChildOne"
  }
  FUNC $getSome() string
    RETURN "ChildOne"
  }
}

CLASS ChildTwo EXTENDS Parent IMPLEMENTS I_One
  FUNC $getName() string @replace
    RETURN "ChildTwo"
  }
  FUNC $getSome() string
    RETURN "ChildTwo"
  }
}

CLASS ChildOneItf IMPLEMENTS ChildOne.I, Parent.I
  int $nr
  FUNC $getName() string
    RETURN "ChildOneItf"
  }
  FUNC $getSome() string
    RETURN "ChildOneItf"
  }
}

# Check that when ISA says the type matches an assignment works.
FUNC test_canAssign() status
  Parent p = NEW()
  Parent.I pi
  I_One i1
  ChildOne c1
  ChildOne.I c1i
  ChildTwo c2
  ChildTwo.I c2i
  ChildOneItf c1itf
  ChildOneItf.I c1itfi

  TEST.true(p ISA Parent)
  # p = p  causes compiler warning
  TEST.true(p ISA Parent.I)
  pi = p
  TEST.false(p ISA I_One)
  TEST.equal("Parent", pi.getName())
  TEST.false(p ISA ChildOne)
  TEST.false(p ISA ChildOne.I)
  TEST.false(p ISA ChildTwo)
  TEST.false(p ISA ChildTwo.I)
  TEST.false(p ISA ChildOneItf)
  TEST.false(p ISA ChildOneItf.I)

  p = ChildOne.NEW()
  TEST.true(p ISA Parent)
  # p = p  causes compiler warning
  TEST.true(p ISA Parent.I)
  pi = p
  TEST.equal("ChildOne", pi.getName())
  TEST.true(p ISA ChildOne)
  c1 = p
  TEST.equal("ChildOne", c1.getName())
  TEST.true(c1 ISA I_One)
  i1 = c1
  TEST.equal("ChildOne", i1.getSome())
  TEST.true(p ISA ChildOne.I)
  c1i = p
  TEST.equal("ChildOne", c1i.getName())
  TEST.false(p ISA ChildTwo)
  TEST.false(p ISA ChildTwo.I)
  TEST.false(p ISA ChildOneItf)
  TEST.false(p ISA ChildOneItf.I)

  p = ChildTwo.NEW()
  TEST.true(p ISA Parent)
  # p = p  causes compiler warning
  TEST.true(p ISA Parent.I)
  pi = p
  TEST.equal("ChildTwo", pi.getName())
  TEST.false(p ISA ChildOne)
  TEST.false(p ISA ChildOne.I)
  TEST.true(p ISA ChildTwo)
  c2 = p
  TEST.equal("ChildTwo", c2.getName())
  TEST.true(c2 ISA I_One)
  i1 = c2
  TEST.equal("ChildTwo", i1.getSome())
  TEST.true(p ISA ChildTwo.I)
  c2i = p
  TEST.equal("ChildTwo", c2i.getName())
  TEST.false(p ISA ChildOneItf)
  TEST.false(p ISA ChildOneItf.I)

  p = ChildOneItf.NEW()
  TEST.false(p ISA Parent)
  TEST.true(p ISA Parent.I)
  pi = p
  TEST.equal("ChildOneItf", pi.getName())
  TEST.false(p ISA I_One)
  TEST.false(p ISA ChildOne)
  TEST.true(p ISA ChildOne.I)
  c1i = p
  TEST.equal("ChildOneItf", c1i.getName())
  TEST.false(p ISA ChildTwo)
  TEST.false(p ISA ChildTwo.I)
  TEST.true(p ISA ChildOneItf)
  c1itf = p
  TEST.equal("ChildOneItf", c1itf.getName())
  TEST.true(p ISA ChildOneItf.I)
  c1itfi = p
  TEST.equal("ChildOneItf", c1itfi.getName())

  RETURN OK
}

CLASS Parent2 IMPLEMENTS I_One
  FUNC $getSome() string
    RETURN "some"
  }
}
CLASS Child2 EXTENDS Parent2
}

FUNC test_childHasInterface() status
  Parent2 p = NEW()
  TEST.true(p ISA I_One)
  p = Child2.NEW()
  TEST.true(p ISA I_One)

  RETURN OK
}
