#
# The Zimbu compiler written in Zimbu
#
# Tests for the SWITCH command
#
#*license
#* Copyright 2013-2015 Bram Moolenaar  All Rights Reserved.
#*
#* Licensed under the Apache License, Version 2.0.  See the LICENSE file or
#* obtain a copy at: http://www.apache.org/licenses/LICENSE-2.0
#

ENUM Color
  blue
  red
  black
}

FUNC switchOnEnum1(Color val) int
  int result
  SWITCH val
    CASE Color.red
      # PROCEED  # gives an error
      result += 1
    CASE Color.blue
      {
        result += 2
      }
      {
        result += 4
      }
      PROCEED
    CASE Color.black
      result += 8
      # PROCEED  # gives an error
  }
  RETURN result
}

FUNC switchOnEnum2(Color val) int
  int result
  SWITCH val
    CASE Color.red; result += 1
      PROCEED
    CASE Color.blue
       result += 2; BREAK

CASE Color.black
    {
      result += 4
    }
    {
      result += 8
    }
   BREAK
  }
  RETURN result
}

FUNC test_enum() status
  TEST.equal(1, switchOnEnum1(Color.red))
  TEST.equal(14, switchOnEnum1(Color.blue))
  TEST.equal(8, switchOnEnum1(Color.black))

  TEST.equal(3, switchOnEnum2(Color.red))
  TEST.equal(2, switchOnEnum2(Color.blue))
  TEST.equal(12, switchOnEnum2(Color.black))

  RETURN OK
}

# Check that a function ending in a SWITCH is OK if all branches end in
# RETURN/EXIT/THROW
FUNC noReturn() int
  int x
  SWITCH x
    CASE 1
      THROW "wrong"
    CASE 2
      EXIT 8
    DEFAULT
      RETURN 3
  }
}

FUNC test_noReturn() status
  TEST.equal(3, noReturn())

  RETURN OK
}

FUNC stringSwitch(string val) int
  int res
  SWITCH val
    CASE "bar"; res += 1
                PROCEED
    CASE "foo"; res += 2
    CASE "nope"; res += 4
    DEFAULT; res += 8
  }
  res += 1
  RETURN res
}

FUNC test_string() status
  TEST.equal(4, stringSwitch("bar"))
  TEST.equal(3, stringSwitch("foo"))
  TEST.equal(5, stringSwitch("nope"))
  TEST.equal(9, stringSwitch("other"))

  RETURN OK
}

FUNC stringMatch(string val) int
  int res
  regex re = RE("b.r")
  SWITCH val
    CASE "bar"
      res += 1
    MATCH "f.o"
      res += 2
    MATCH re
      res += 4
    CASE "blah"
      res += 8
    DEFAULT
      res += 16
  }
  RETURN res
}

FUNC test_match() status
  TEST.equal(1, stringMatch("bar"))
  TEST.equal(2, stringMatch("foo"))
  TEST.equal(2, stringMatch("fao"))
  TEST.equal(4, stringMatch("ber"))
  TEST.equal(4, stringMatch("bAr"))
  TEST.equal(8, stringMatch("blah"))
  TEST.equal(16, stringMatch("Bar"))

  RETURN OK
}
