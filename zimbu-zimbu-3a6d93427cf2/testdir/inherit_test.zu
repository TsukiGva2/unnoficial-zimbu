#
# The Zimbu compiler written in Zimbu
#
# Tests for inheritance
#
#*license
#* Copyright 2015 Bram Moolenaar  All Rights Reserved.
#*
#* Licensed under the Apache License, Version 2.0.  See the LICENSE file or
#* obtain a copy at: http://www.apache.org/licenses/LICENSE-2.0
#

CLASS TopClass @abstract
  int  $number
  TopClass $ref
  NEW() @default
    $number = 1
  }
  FUNC $getName() string @default
    RETURN "TopClass"
  }
  FUNC $getNameIndirect() string
    RETURN $getName()
  }
}

CLASS MiddleClass0 EXTENDS TopClass
  int  $middle0
  NEW() @replace @default
    $number = 0
  }
  FUNC $getName() string @replace
    RETURN "MiddleClass0"
  }
}

CLASS MiddleClass1 EXTENDS TopClass
  int  $middle1
  NEW() @replace @default
    $number = 2
  }
  FUNC $getName() string @replace @default
    RETURN "MiddleClass1"
  }
}

CLASS MiddleClass2 EXTENDS TopClass
  int  $middle2
  NEW() @replace
    $number = 3
  }
  FUNC $getName() string @replace
    RETURN "MiddleClass2"
  }
}

CLASS BottomClass1 EXTENDS MiddleClass1
  int  $bottom1
  NEW() @replace
    $number = 4
  }
  FUNC $getName() string @replace
    RETURN "BottomClass1"
  }
}

CLASS BottomClass2 EXTENDS MiddleClass1
  int  $bottom2
  NEW() @replace
    $number = 5
  }
  FUNC $getName() string @replace
    RETURN "BottomClass2"
  }
}

# Three levels of inheritance, check that all the interfaces work.
FUNC test_levels() status
  MiddleClass0 m0
  MiddleClass1.C m1
  MiddleClass2 m2
  BottomClass1 b1
  BottomClass2 b2
  TopClass topi
  MiddleClass1 middlei
  
  topi = MiddleClass0.NEW()
  m0 = topi
  TEST.equal("MiddleClass0", m0.getName())

  topi = MiddleClass1.NEW()
  m1 = topi
  TEST.equal("MiddleClass1", m1.getName())
  middlei = topi
  TEST.equal("MiddleClass1", middlei.getName())
  m1 = middlei
  TEST.equal("MiddleClass1", m1.getName())

  topi = MiddleClass2.NEW()
  m2 = topi
  TEST.equal("MiddleClass2", m2.getName())
  TEST.equal("MiddleClass2", m2.getNameIndirect())

  topi = BottomClass1.NEW()
  b1 = topi
  TEST.equal("BottomClass1", b1.getName())
  middlei = topi
  TEST.equal("BottomClass1", middlei.getName())
  b1 = middlei
  TEST.equal("BottomClass1", b1.getName())

  topi = BottomClass2.NEW()
  b2 = topi
  TEST.equal("BottomClass2", b2.getName())
  middlei = topi
  TEST.equal("BottomClass2", middlei.getName())
  b2 = middlei
  TEST.equal("BottomClass2", b2.getName())

  middlei = MiddleClass1.NEW()
  TEST.equal("MiddleClass1", middlei.getName())
  m1 = middlei
  TEST.equal("MiddleClass1", middlei.getName())
  topi = middlei
  TEST.equal("MiddleClass1", topi.getName())
  TEST.equal("MiddleClass1", topi.getNameIndirect())

  middlei = BottomClass1.NEW()
  TEST.equal("BottomClass1", middlei.getName())
  b1 = middlei
  TEST.equal("BottomClass1", b1.getName())
  topi = middlei
  TEST.equal("BottomClass1", topi.getName())

  middlei = BottomClass2.NEW()
  TEST.equal("BottomClass2", middlei.getName())
  TEST.equal("BottomClass2", middlei.getNameIndirect())
  b2 = middlei
  TEST.equal("BottomClass2", b2.getName())
  TEST.equal("BottomClass2", b2.getNameIndirect())
  topi = middlei
  TEST.equal("BottomClass2", topi.getName())
  TEST.equal("BottomClass2", topi.getNameIndirect())

  RETURN OK
}

# Test indirect access to member.
FUNC test_indirectAccess() status
  TopClass t = MiddleClass1.NEW()
  t.ref = MiddleClass2.NEW()
  t.ref.number = 5
  TEST.equal(5, t.ref.number)

  RETURN OK
}

FUNC test_isnot() status
  # Check that creating two iobjects from the same object results in IS and
  # ISNOT comparing the object, not the iobject.
  BottomClass1 b1 = NEW()
  MiddleClass1 m1 = b1
  MiddleClass1 m2 = b1
  TEST.true(m1 IS m2)
  TEST.false(m1 ISNOT m2)

  # When an object is on the stack a copy is made, thus identity is lost.
  BottomClass1 %sb1 = NEW()
  MiddleClass1 %sm1 = %sb1
  MiddleClass1 %sm2 = %sb1
  TEST.false(%sm1 IS %sm2)
  TEST.true(%sm1 ISNOT %sm2)

  RETURN OK
}

########################
# Similar to WriteCommon, Resulve, WriteC and WriteJS

CLASS Common
  bool $writing

  PROC $Init()
    $map = NEW()
  }

  FUNC $getName() string @default
    RETURN "Common"
  }

  dict<string, int> $map
}

CLASS Resolve EXTENDS Common
  FUNC $getName() string @replace
    RETURN "Resolve"
  }
  PROC $write()
  }
  FUNC $block() string
    RETURN "Resolve block"
  }
}
CLASS WriteC EXTENDS Common IMPLEMENTS Resolve.I
  FUNC $getName() string @replace
    $doNoting()
    RETURN "WriteC"
  }
  PROC $doNoting()
  }
  PROC $write()
  }
  FUNC $block() string
    RETURN "WriteC block"
  }
}
CLASS WriteJS EXTENDS Common IMPLEMENTS Resolve.I
  FUNC $getName() string @replace
    $something()
    RETURN "WriteJS"
  }
  PROC $something()
  }
  FUNC $block() string
    RETURN "WriteJS block"
  }
  PROC $write()
  }
}

FUNC test_inheritWithInterface() status
  Resolve r = NEW()
  TEST.equal("Resolve", r.getName())

  WriteC wc = NEW()
  TEST.equal("WriteC", wc.getName())

  WriteJS wjs = NEW()
  TEST.equal("WriteJS", wjs.getName())

  RETURN OK
}
