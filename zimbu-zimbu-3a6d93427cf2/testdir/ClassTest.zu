# Test some class stuff.
#
# Copyright 2015 Bram Moolenaar  All Rights Reserved.
# Licensed under the Apache License, Version 2.0.  See the LICENSE file or
# obtain a copy at: http://www.apache.org/licenses/LICENSE-2.0
#

MODULE ClassTest

  PROC test() @public
    IO.print("testdir/ClassTest.zu")
    testToken()
    testInput()
    testIdentity()
    testParentMethod()
  }

  ENUM TType
    value
    eof
    string
    char
    int
  }

  CLASS Koken
    TType   $type
    string  $value
    Koken   $next

    PROC $setType(TType type /* comment */)
      $type = type
      IO.print($type.ToString())
    }
    PROC $setValue(string value /* comment */ )
      $value = value
    }
    FUNC $getType() TType
      RETURN $type
    }
    FUNC $getValue() string
      RETURN $value
    }
  }

  PROC testToken()
    Koken t = NEW()
    t.setType(TType.eof)
    t.setValue("token")
    IO.print("Koken type: " .. t.type.ToString() .. ", value: " .. t.getValue())
    Koken x = t.next

    Koken nt = NEW()
    nt.setValue("Next")
    t.next = nt
    IO.print("next method: " .. t.next.getValue() .. ", member: " .. t.next.value)

    Koken nnt = NEW()
    nnt.setValue("NextNext")
    nt.next = nnt
    IO.write("next-next member: " .. t.next.next.value)
    IO.print(", method: " .. t.next.next.getValue())
  }

  CLASS Input
    IO.File           $fd             # input stream
    int               $lnum
    array<int>        $prevc          # characters pushed back
    int               $prevcIdx       # current index in prevc[]

    NEW()
      $lnum = -1
      $prevc = NEW(100)
    }
    NEW(string x)
      $lnum = -1
      $prevc = NEW(100)
    }
    NEW(int lnum)
      $lnum = lnum
      $prevc = NEW(100)
    }
    NEW(string x, int lnum)
      $lnum = lnum
      $prevc = NEW(100)
    }

    PROC $read()
      $lnum = -1
    }
    PROC $read(string x)
      $lnum = -1
    }
    PROC $read(int lnum)
      $lnum = lnum
    }
    PROC $read(string x, bool flag)
      $lnum = 23
    }

    PROC $testRead()
      $read("hoho")
      Koken token = NEW()
      $read(token.getValue())
    }

    FUNC $getIt() Input
      RETURN THIS
    }
  }

  FUNC get(Input input) int
    int c

    IF input.prevcIdx > 0
      c = input.prevc[--input.prevcIdx]
    ELSE
      DO
        c = input.fd.readByte()
        IF c == IO.eof
          c = 0
        }
        IF c == '\t'
          IO.print("WARNING: found Tab character in line " .. input.lnum)
          c = ' '
        }
      UNTIL c != '\r'  # CR characters are always ignored
      IF c == '\n'
        ++input.lnum
        IO.write("Hello\n")
      }
    }
    RETURN c
  }

  FUNC getLnum(Input input) int
    RETURN input.lnum
  }

  PROC testInput()
    Input inp = NEW(55)
    IO.write("Input lnum = " .. getLnum(NEW(88)))
    IO.print(" and " .. Input.NEW(76).lnum)

    Input one = NEW()
    Input two = NEW("he")
    Input three = NEW(22)
    Input four = NEW("ho", 22)
    one.read()
    two.read("hi")
    three.read(23)
    four.read("hu", TRUE)

    one.fd = IO.fileReader("zimbu.zu")
    IO.print(get(one))
  }

  PROC testIdentity()
    # Test ISA and ISNOTA
    INTERFACE I_OneTwo
      string $name
    }
    CLASS Tone IMPLEMENTS I_OneTwo, IO.I_Writer
      string $name
      int    $one
      FUNC $write(string text) status
        $name ..= text
        RETURN OK
      }
      FUNC $writeByte(int b) status
        $name ..= b.asString()
        RETURN OK
      }
      FUNC $writeChar(int c) status
        $name ..= c.asString()
        RETURN OK
      }
      FUNC $writeLine(string text) status
        $name ..= text .. "\n"
        RETURN OK
      }
      FUNC $print(string text) status
        $name ..= text .. "\n"
        RETURN OK
      }
    }
    CLASS Ttwo IMPLEMENTS I_OneTwo, IO.I_Writer
      string $name
      int    $two
      FUNC $write(string text) status
        $name ..= text
        RETURN OK
      }
      FUNC $writeByte(int b) status
        $name ..= b.asString()
        RETURN OK
      }
      FUNC $writeChar(int c) status
        $name ..= c.asString()
        RETURN OK
      }
      FUNC $writeLine(string text) status
        $name ..= text .. "\n"
        RETURN OK
      }
      FUNC $print(string text) status
        $name ..= text .. "\n"
        RETURN OK
      }
    }

    I_OneTwo to = Tone.NEW()
    to.name = "one"
    Tone tone = to
    tone.one = 1
    IF to ISA Tone
      IO.print("to ISA Tone")
    }
    IF to ISA Ttwo
      IO.print("to ISA Ttwo")
    }
    IF to ISNOTA Tone
      IO.print("to ISNOTA Tone")
    }
    IF to ISNOTA Ttwo
      IO.print("to ISNOTA Ttwo")
    }
    to = Ttwo.NEW()
    to.name = "two"
    Ttwo ttwo = to
    ttwo.two = 2
    IF to ISA Tone
      IO.print("to ISA Tone")
    }
    IF to ISA Ttwo
      IO.print("to ISA Ttwo")
    }
    IF to ISNOTA Tone
      IO.print("to ISNOTA Tone")
    }
    IF to ISNOTA Ttwo
      IO.print("to ISNOTA Ttwo")
    }

    PROC writeSomeX(I_OneTwo writer)
      writer.name = "foo"
    }
    PROC writeSome(IO.I_Writer writer)
      writer.write("blah")
    }
  }

  # Verify that a child class can call a method from the parent class.
  CLASS Style
    string $name
  }

  CLASS Class1
    PROC $doit(int xv)
    }
    PROC $setStyle(Style style) @default
    }
  }

  CLASS Class2 EXTENDS Class1
    PROC $doit2()
      $doit(2)
    }
    CLASS Class3 EXTENDS Class1
      PROC $doit3()
        $doit(2)
      }
    }
  }

  CLASS Class4 EXTENDS Class1
    PROC $neverCalled()
      IO.print("nothing")
    }
  }

  PROC testParentMethod()
    Class4 c4 = NEW()
    c4.setStyle(NEW())
  }

}
