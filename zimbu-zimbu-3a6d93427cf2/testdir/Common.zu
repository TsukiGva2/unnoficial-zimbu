# Zimbu tests common to C and Javascript
#
# Copyright 2015 Bram Moolenaar  All Rights Reserved.
# Licensed under the Apache License, Version 2.0.  See the LICENSE file or
# obtain a copy at: http://www.apache.org/licenses/LICENSE-2.0

# DO NOT ADD TESTS HERE
# Add them in testZimbu.zu instead.

IMPORT ARGtest.zu      # ARG
IMPORT Alias.zu        # ALIAS
IMPORT Arguments.zu    # function arguments
IMPORT Array.zu        # array<>
IMPORT Bits.zu         # BITS
IMPORT BoolTest.zu     # bool tests
IMPORT BoxTest.zu      # BOX
IMPORT CTXtests.zu     # CTX module
IMPORT Callback.zu     # callback<> and closures
IMPORT CheckTest.zu    # CHECK
IMPORT ClassTest.zu    # class stuff
IMPORT CompareTest.zu  # Equal(), Compare()
IMPORT Date.zu         # Date class
IMPORT DeferTest.zu    # DEFER
IMPORT DictTest.zu     # dict tests
IMPORT DotNilTest.zu   # ?. tests
IMPORT DynTest.zu      # dyn
IMPORT Errors.zu       # check compiler errors
IMPORT FloatTest.zu    # float
IMPORT IOtests.zu      # IO module
IMPORT Inherit.zu      # classes, inheritance, interfaces
IMPORT InitTest.zu     # $Init()
IMPORT IntTest.zu      # int tests
IMPORT Lambda.zu       # { => expr }
IMPORT ListTest.zu     # list<>
IMPORT Loop.zu         # Loops
IMPORT MatchFunction.zu # match function by arguments
IMPORT MethodCall.zu   # method calls and function overloading
IMPORT MultiDictTest.zu # multiDict<>
IMPORT NatTest.zu      # nat tests
IMPORT NotManaged.zu   # not managed memory
IMPORT Operators.zu    # operator tests
IMPORT PieceTest.zu    # PIECE and INCLUDE
IMPORT ProtoTest.zu    # protocol buffer tests
IMPORT ReturnTest.zu   # RETURN one, two
IMPORT SetTest.zu      # set tests
IMPORT Something_2.zu  # defines class Something
IMPORT SortedListTest.zu  # sortedList tests
IMPORT StaticTest.zu   # STATIC variables
IMPORT StatusTest.zu   # status tests
IMPORT StringTest.zu   # string tests
IMPORT Template.zu     # function and class templates
IMPORT TimeTest.zu     # TIME
IMPORT TryCatch.zu     # TRY-CATCH
IMPORT TupleTest.zu    # tuple<>
IMPORT TypeTest.zu     # type
IMPORT Typedef.zu      # TYPE
IMPORT Util.zu         # test utilities
IMPORT Various.zu      # various tests
IMPORT Visibility.zu   # @private @public @read=public

IMPORT subdir/Some.zu  # test subdirectory
IMPORT nothing.zu      # empty file
IMPORT "dir with space/File.zu"

MODULE Common @public

  ARG.Bool xflag = NEW("x", NIL, FALSE, "The X flag")

  PROC test() @public
    # Test the test utilities
    Util.test()

    Some.print()

    # Test ARG
    ARGtest.test()

    # Test ALIAS
    Alias.test()

    # Test function arguments
    Arguments.test()

    # Test array<>
    Array.test()

    # Test BITS
    Bits.test()

    # Free up memory.
    GC.run()

    # Test bool methods
    BoolTest.test()

    # Test BOX
    BoxTest.test()

    # Test CTX module
    CTXtests.test()

    # Test callback<>
    Callback.test()

    # Test CHECK
    CheckTest.test()

    # Test class stuff
    ClassTest.test()

    # Test Equal() and Compare()
    CompareTest.test()

    IO.print("testdir/Date.zu")
    WHILE TRUE
      Date date = Date.fromString("Jun 1 1001")
      Date.asdf = 234
      BREAK
    }

    # Test DEFER
    DeferTest.test()

    # Free up memory.
    GC.run()

    # Test dict<>
    DictTest.test()

    # Test ?.
    DotNilTest.test()

    # Test dyn
    DynTest.test()

    # Needed to avoid Errors is omitted because nothing is used.
    Errors.test()

    # Test float
    FloatTest.test()

    # Test IO module
    IOtests.test()

    # Test inheritance.
    Inherit.test()

    # Test $Init() in CLASS
    InitTest.test()

    # Test int methods
    IntTest.test()

    # Test lamda functions
    Lambda.test()

    # Test list<>
    ListTest.test()

    # Test Loops
    Loop.test()

    # Free up memory.
    GC.run()

    # Test matching methods by argument
    MatchFunction.test()

    # Test method calls
    MethodCall.test()

    # Test "multiDict"
    MultiDictTest.test()

    # Test nat methods
    NatTest.test()

    # Test not managed memory
    NotManaged.test()

    # Free up memory.
    GC.run()

    # Test operators
    Operators.test()

    # Test PIECE and INCLUDE
    PieceTest.test()

    # Test protocol buffers.
    ProtoTest.test()

    # Free up memory.
    GC.run()

    # Test RETURN with more than one value
    ReturnTest.test()

    # Test set<>
    SetTest.test()

    # Free up memory.
    GC.run()

    # Test "sortedList"
    SortedListTest.test()

    # Free up memory.
    GC.run()

    # Test STATIC
    StaticTest.test()

    # Test status methods
    StatusTest.test()

    # Test "varString", "string", "byteString" and "varByteString" types.
    StringTest.test()

    # Test class and function templates
    Template.test()

    # Test TIME
    TimeTest.test()

    # Test TRY / CATCH / ELSE / FINALLY
    TryCatch.test()

    # Free up memory.
    GC.run()

    # Test type
    TypeTest.test()

    # Test TYPE
    Typedef.test()

    # Test tuple<>
    TupleTest.test()

    Various.test()

    # Test Visibility stuff
    Visibility.test()

    # Visibility.ClassOne classOne = NEW()  # should fail

    # Free up memory.
    GC.run()

    IO.print("testdir/Common.zu")
    testSomething()
    testGreat()

    File.print("dir with space")
  }

  PROC testSomething()
    Something.Foobar foobar = NEW(123)
    IO.print(foobar.get() .. Something.xxname .. Something.getFive())

    Something not = NEW("another nothing")
    IO.print("Something object: " .. not.text .. " and " .. Something.nope())
    not.text = "xyz"
    Something xno = not.get()
    xno.text = "nnn"
    not.get().text = "abc"
  }

  MODULE Great
    string value = "Great value"
    FUNC getThree() int
      RETURN 3
    }
    MODULE Sub
      int int = 5    # this is allowed but not nice
      int dict = 5
      int list = 5
      int proc = 5
      int xyz = 4
      FUNC getFive() string
        RETURN "five"
      }
    }
    ENUM Nested
      one two three
    }

  }

  PROC tryout(Great.Nested bar)
    Great.Nested foo = Great.Nested.one
    foo = bar
  }

  PROC testGreat()
    IO.print(Great.value .. "-" .. Great.getThree() .. "-"
                 .. Great.Sub.xyz .. "-" .. Great.Sub.getFive())
  }

}
