#
# Part of Zudocu.
#
# Copyright 2015 Bram Moolenaar  All Rights Reserved.
# Licensed under the Apache License, Version 2.0.  See the LICENSE file or
# obtain a copy at: http://www.apache.org/licenses/LICENSE-2.0
#

IMPORT.PROTO ../parser/zui.proto

IMPORT Parent.zu
IMPORT Summary.zu
IMPORT DocItems.zu
IMPORT Util.zu


#= Information collected for a documentation page.
#= There is one for every Module, Class and Enum.
CLASS Page @items=public
  Parent   $parent     # parent item, NIL for toplevel module or class
  list<Page> $children # classes inside a module

  string       $name          # e.g., "Server"
  string       $fullName      # parent.name, e.g. "HTTP.Server"; equal to
                              # |name| when |parent| is NIL
  Zui.Statement  $stmt        # Statement that declares the item.
  Zui.Attributes $attr

  string       $type          # "class", "module", "enum", "bits"
  string       $typeSpec      # "<Type, Titem>" or NIL
  string       $comment       # main comment for this item
  bool         $noIndex       # don't list in index
  bool         $hide          # there was a #! comment

  Summary      $summary       # summary of items in this file.
  string       $extends       # name of class or interface being extended
  string       $extendsNoType # idem, without <Type>
  string       $extendsKeyword  # EXTENDS, AUGMENTS or GROWS

  list<string> $implements    # list of implemented interfaces
  list<string> $includes      # list of included pieces/classes/interfaces
  ZUT.Html     $header        # before the summary
  ZUT.Html     $tail          # after the summary

  NEW(Parent parent, string name, Zui.Statement stmt, Zui.Attributes attr,
      string type, DocItems items)
    $parent = parent
    $children = NEW()
    $name = name
    $stmt = stmt
    $attr = attr
    $type = type
    IF parent == NIL
      $fullName = name
    ELSE
      $fullName = $parent.fullName .. "." .. name
    }
    pages.add($fullName, THIS)

    $header = NEW()
    $tail = NEW()
    IF items == NIL || items.summary == NIL
      $comment = ""
    ELSE
      $comment = items.summary.ToString()
    }
    IF items != NIL
      $noIndex = items.noIndex
      $hide = items.hide
    }
    $implements = NEW()
  }

  # For use in sortedList.
  FUNC $Compare(Page other) int @public
    RETURN $name.toLower().Compare(other.name.toLower())
  }
  FUNC $ToString() string @public
    RETURN $name
  }

  # Return the full name of the parent class.  This is a bit of guessing.
  FUNC $parentName() string
    IF $parent != NIL
      # First try parent.extends.  E.g. ZWT.Label for "EXTENDS Label"
      string pName = $parent.fullName .. "." .. $extendsNoType
      IF pages.has(pName)
        RETURN pName
      }
    }
    # Try without adding the parent, e.g. for "EXTENDS HTTP.Servlet"
    RETURN $extendsNoType
  }

  PROC $addHeader(ZUT.Html html)
    $header.add(html)
  }

  PROC $addTail(ZUT.Html html)
    $tail.add(html)
  }

  PROC $addImplements(Parent parent, list<Zui.Expression> implements)
    FOR impl IN implements
      # Prepend the surrounding module or class name, unless the names starts
      # with "I.".
      string s = Util.getDotName(impl, parent)
      IF parent != NIL && !s.startsWith("I.")
        s = parent.fullName .. "." .. s
      }
      $implements.add(s)
    }
  }

  SHARED
    # Dictionary with all the pages.
    # Key is the full name, e.g. "IO", "HTTP.Server".
    dict<string, Page> pages = NEW()
  }

}
