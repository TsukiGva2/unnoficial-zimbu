#
# The Zimbu compiler written in Zimbu
#
# Handle arguments common to zimbu and zimbu2c
#
# Copyright 2009 Bram Moolenaar  All Rights Reserved.
# Licensed under the Apache License, Version 2.0.  See the LICENSE file or
# obtain a copy at: http://www.apache.org/licenses/LICENSE-2.0
#

IMPORT CommonFlags.zu
IMPORT Config.zu
IMPORT TargetLang.zu

MODULE Arguments

  ARG.Usage usage = NEW("Usage: %0% [--help] [flags] source.zu")

  bool testMode @public

  string inFileName @public
  string rootName @public  # inFileName without ".zu"
  string rootTail @public  # rootName without directory
  string dirName @public
  string zudirName @public

  string outFileName @public
  string ecaFileName @public

  FUNC getTargetLang() TargetLang
    IF CommonFlags.writeJsFlag.get() && CommonFlags.writeJavaFlag.get()
      LOG.fatal("Only --js or --java is allowed, not both")
    }
    TargetLang targetLang
    IF CommonFlags.writeJsFlag.get()
      targetLang.js = TRUE
    ELSEIF CommonFlags.writeJavaFlag.get()
      targetLang.java = TRUE
    ELSE
      targetLang.c = TRUE
    }
    RETURN targetLang
  }

  PROC parse(TargetLang targetLang) @public
    IF ARG.Size() < 1
      IO.print("Missing source file argument")
      IO.print(usage.get())
      EXIT 1
    }

    # "zimbu test infile.zu" executes tests
    testMode = ARG.get(0) == "test"

    IF ARG.Size() > (testMode ? 2 : 1)
      LOG.fatal("Only one .zu file allowed")
    }

    # Catch common mistakes in arguments.
    inFileName = ARG.get(testMode ? 1 : 0)
    IF inFileName.sliceWrap(-3) != ".zu"
      LOG.fatal("Input name must end in '.zu': \(inFileName)")
    }

    rootName = inFileName.sliceWrap(0, -4)
    rootTail = IO.tail(rootName)
    dirName = IO.directory(rootName)
    zudirName = IO.concatPath(dirName, Config.zudirName)

    IF targetLang.js
      # The Javascript file goes into filename.js.
      outFileName = rootName .. ".js"
    ELSEIF targetLang.java
      # The Javascript file goes into base/ZUDIR/filename.java.
      outFileName = IO.concatPath(zudirName, rootTail .. ".java")
    ELSE
      # The C file goes into base/ZUDIR/name.c.
      outFileName = IO.concatPath(zudirName, rootTail .. ".c")
    }

    ecaFileName = IO.concatPath(zudirName, IO.tail(rootName) .. ".eca")

    # Run auto-configuration.  Fills in values for the Config module.
    IF Config.run() != OK
      LOG.fatal("Config failed, cannot compile a program")
    }
  }
}
